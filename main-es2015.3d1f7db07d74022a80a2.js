(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(e,t,i){e.exports=i("zUnb")},"1O9H":function(e,t){e.exports='<div id="demo-container"\r\n     class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle"\r\n         [innerHTML]="subTitle"></div>\r\n\r\n    <div class="col-sm-12">\r\n        <span>\r\n            <label>Scroll: </label>\r\n            <div class="btn-group" role="group">\r\n                <button class="btn btn-sm btn-outline-secondary" (click)="scrollGridTop()">\r\n                    <i class="fa fa-arrow-up"></i>\r\n                </button>\r\n                <button class="btn btn-sm btn-outline-secondary" (click)="scrollGridBottom()">\r\n                    <i class="fa fa-arrow-down"></i>\r\n                </button>\r\n            </div>\r\n            <button class="btn btn-sm btn-outline-secondary"\r\n                    (click)="addNewItem()">Add New Mocked Item</button>\r\n            <button class="btn btn-sm btn-outline-secondary"\r\n                    (click)="addNewItem(\'bottom\')">Add New Mocked Item (bottom)</button>\r\n            <button class="btn btn-sm btn-outline-secondary"\r\n                    (click)="updateSecondItem()">Update 2nd Row Item with Random Duration</button>\r\n            <button class="btn btn-sm btn-outline-secondary"\r\n                    (click)="highlighFifthRow()">Highlight 5th Row</button>\r\n            <button class="btn btn-sm btn-outline-secondary"\r\n                    (click)="changeDurationBackgroundColor()">Highlight Rows with Duration over 50</button>\r\n        </span>\r\n        <hr />\r\n    </div>\r\n\r\n    <div class="col-sm-12">\r\n        <angular-slickgrid gridId="grid2"\r\n                           [columnDefinitions]="columnDefinitions"\r\n                           [gridOptions]="gridOptions"\r\n                           [dataset]="dataset"\r\n                           (onAngularGridCreated)="angularGridReady($event)">\r\n        </angular-slickgrid>\r\n    </div>\r\n</div>'},"3JFF":function(e,t){e.exports='\r\n<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <h3>Grid 1</h3>\r\n    <angular-slickgrid gridId="grid1"\r\n                [columnDefinitions]="columnDefinitions1"\r\n                [gridOptions]="gridOptions1"\r\n                [dataset]="dataset1"\r\n                gridHeight="300"\r\n                gridWidth="800">\r\n    </angular-slickgrid>\r\n\r\n    <hr/>\r\n\r\n    <h3>Grid 2</h3>\r\n    <angular-slickgrid gridId="grid2"\r\n                [columnDefinitions]="columnDefinitions2"\r\n                [gridOptions]="gridOptions2"\r\n                [dataset]="dataset2"\r\n                gridHeight="300"\r\n                gridWidth="800">\r\n    </angular-slickgrid>\r\n</div>\r\n\r\n'},"3RMc":function(e,t){e.exports='<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <br>\r\n\r\n    <div class="row col-sm-12">\r\n        <span>\r\n            <label for="">Pinned Rows: </label>\r\n            <input type="number" [(ngModel)]="frozenRowCount">\r\n            <button class="btn btn-outline-secondary btn-xs" (click)="changeFrozenRowCount()">\r\n                Set\r\n            </button>\r\n        </span>\r\n        <span style="margin-left: 10px">\r\n            <label for="">Pinned Columns: </label>\r\n            <input type="number" [(ngModel)]="frozenColumnCount">\r\n            <button class="btn btn-outline-secondary btn-xs" (click)="changeFrozenColumnCount()">\r\n                Set\r\n            </button>\r\n        </span>\r\n        <span style="margin-left: 15px">\r\n            <button class="btn btn-outline-secondary btn-sm" (click)="toggleFrozenBottomRows()">\r\n               <i class="fa fa-random fa-lg"></i> Toggle Pinned Rows\r\n            </button>\r\n            <span style="font-weight: bold;">: {{ isFrozenBottom ? \'Bottom\' : \'Top\' }}</span>\r\n        </span>\r\n    </div>\r\n\r\n    <div class="col-sm-12">\r\n        <hr>\r\n    </div>\r\n\r\n    <angular-slickgrid gridId="grid20"\r\n              gridWidth="875"\r\n              [columnDefinitions]="columnDefinitions"\r\n              [gridOptions]="gridOptions"\r\n              [dataset]="dataset"\r\n              (onAngularGridCreated)="angularGridReady($event)">\r\n    </angular-slickgrid>\r\n</div>\r\n'},"3jFL":function(e,t){e.exports='<div id="demo-container"\r\n  class="container-fluid">\r\n  <h2>{{title}}</h2>\r\n  <div class="subtitle"\r\n    [innerHTML]="subTitle"></div>\r\n\r\n  <br />\r\n  <span *ngIf="metrics"\r\n    style="margin-right: 10px">\r\n    <b>Metrics:</b> {{metrics.startTime | date: \'yyyy-MM-dd HH:mm aaaaa\\\'m\\\'\'}} | {{metrics.itemCount}} of\r\n    {{metrics.totalItemCount}} items\r\n  </span>\r\n  <button class="btn btn-outline-secondary btn-sm"\r\n    (click)="angularGrid.filterService.clearFilters()">Clear Filters</button>\r\n  <button class="btn btn-outline-secondary btn-sm"\r\n    (click)="angularGrid.sortService.clearSorting()">Clear Sorting</button>\r\n\r\n  <angular-slickgrid gridId="grid2"\r\n    [columnDefinitions]="columnDefinitions"\r\n    [gridOptions]="gridOptions"\r\n    [dataset]="dataset"\r\n    (onAngularGridCreated)="angularGridReady($event)"\r\n    (onGridStateChanged)="gridStateChanged($event)"\r\n    (onBeforeGridDestroy)="saveCurrentGridState($event)"\r\n    (sgOnRowCountChanged)="refreshMetrics($event.detail.eventData, $event.detail.args)">\r\n  </angular-slickgrid>\r\n</div>'},"8Jzt":function(e,t){e.exports="h3 {\n  font-style: normal;\n  color: #3d3d3d; }\n\n#slickGridContainer-grid22 .slickgrid-container .slick-headerrow-column .ng-input {\n  padding-top: -4px !important;\n  padding-left: 4px !important; }\n\n#slickGridContainer-grid22 .slickgrid-container .slick-cell {\n  line-height: 30px !important; }\n\n#slickGridContainer-grid22 input.slider-filter-input[type=range],\n#slickGridContainer-grid22 .slider-value .input-group-text,\n#slickGridContainer-grid22 .form-control {\n  height: 34px !important; }\n"},"8hOR":function(e,t){e.exports='<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <h3>Grid 1 <small>(with Header Grouping &amp; Colspan)</small></h3>\r\n    <angular-slickgrid gridId="grid1"\r\n                       [columnDefinitions]="columnDefinitions1"\r\n                       [gridOptions]="gridOptions1"\r\n                       [dataset]="dataset1"\r\n                       gridHeight="275"\r\n                       gridWidth="800">\r\n    </angular-slickgrid>\r\n\r\n    <hr />\r\n\r\n    <h3>Grid 2 <small>(with Header Grouping &amp; Frozen/Pinned Columns)</small></h3>\r\n    <angular-slickgrid gridId="grid2"\r\n                       [columnDefinitions]="columnDefinitions2"\r\n                       [gridOptions]="gridOptions2"\r\n                       [dataset]="dataset2"\r\n                       gridHeight="275"\r\n                       gridWidth="800">\r\n    </angular-slickgrid>\r\n</div>'},Blsj:function(e,t){e.exports='\r\n<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <div class="row">\r\n        <div class="col-sm-8">\r\n          <div class="alert alert-success">\r\n            <strong>(single select) Selected Row:</strong>\r\n            <span [innerHTML]="selectedTitle"></span>\r\n          </div>\r\n        </div>\r\n    </div>\r\n\r\n    <angular-slickgrid gridId="grid1"\r\n        gridHeight="200"\r\n        gridWidth="800"\r\n        [columnDefinitions]="columnDefinitions1"\r\n        [gridOptions]="gridOptions1"\r\n        [dataset]="dataset1"\r\n        (onAngularGridCreated)="angularGridReady1($event)"\r\n        (sgOnSelectedRowsChanged)="handleSelectedRowsChanged1($event.detail.eventData, $event.detail.args)">\r\n    </angular-slickgrid>\r\n\r\n    <hr>\r\n\r\n    <div class="row">\r\n        <div class="col-sm-8">\r\n          <div class="alert alert-success">\r\n            <strong>(multi-select) Selected Row(s):</strong>\r\n            <span [innerHTML]="selectedTitles"></span>\r\n          </div>\r\n        </div>\r\n    </div>\r\n\r\n    <angular-slickgrid gridId="grid2"\r\n        gridHeight="200"\r\n        gridWidth="800"\r\n        [columnDefinitions]="columnDefinitions2"\r\n        [gridOptions]="gridOptions2"\r\n        [dataset]="dataset2"\r\n        (onAngularGridCreated)="angularGridReady2($event)"\r\n        (sgOnSelectedRowsChanged)="handleSelectedRowsChanged2($event.detail.eventData, $event.detail.args)">\r\n    </angular-slickgrid>\r\n  </div>\r\n'},FRgl:function(e,t){e.exports='<div id="demo-container" class="container-fluid">\r\n  <h2>{{title}}</h2>\r\n  <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n  <div class="row">\r\n    <div class="col-sm-4">\r\n      <div [class]="status.class" role="alert" data-test="status">\r\n        <strong>Status: </strong> {{status.text}}\r\n        <span [hidden]="!processing">\r\n          <i class="fa fa-refresh fa-spin fa-lg fa-fw"></i>\r\n        </span>\r\n      </div>\r\n      <span *ngIf="metrics">\r\n        <b>Metrics:</b> {{metrics.endTime | date: \'yyyy-MM-dd HH:mm aaaaa\\\'m\\\'\'}} | {{metrics.executionTime}}ms\r\n        | {{metrics.totalItemCount}} items\r\n      </span>\r\n    </div>\r\n    <div class="col-sm-8">\r\n      <div class="alert alert-info" data-test="alert-odata-query">\r\n        <strong>OData Query:</strong> <span data-test="odata-query-result">{{odataQuery}}</span>\r\n      </div>\r\n\r\n      <label>OData Version: </label>\r\n      <span data-test="radioVersion">\r\n        <label class="radio-inline control-label" for="radio2">\r\n          <input type="radio" name="inlineRadioOptions" data-test="version2" id="radio2" checked [value]="2"\r\n                 (change)="setOdataVersion(2)"> 2\r\n        </label>\r\n        <label class="radio-inline control-label" for="radio4">\r\n          <input type="radio" name="inlineRadioOptions" data-test="version4" id="radio4" [value]="4"\r\n                 (change)="setOdataVersion(4)"> 4\r\n        </label>\r\n      </span>\r\n      <label class="checkbox-inline control-label" for="enableCount" style="margin-left: 20px">\r\n        <input type="checkbox" id="enableCount" data-test="enable-count" [checked]="isCountEnabled"\r\n               (click)="changeCountEnableFlag()">\r\n        <span style="font-weight: bold">Enable Count</span> (add to OData query)\r\n      </label>\r\n    </div>\r\n  </div>\r\n  <div class="row col-md-12">\r\n    <span>Programmatically go to first/last page:</span>\r\n    <button class="btn btn-outline-secondary btn-xs" (click)="goToFirstPage()">\r\n      <i class="fa fa-caret-left fa-lg"></i>\r\n    </button>\r\n    <button class="btn btn-outline-secondary btn-xs" (click)="goToLastPage()">\r\n      <i class="fa fa-caret-right fa-lg"></i>\r\n    </button>\r\n  </div>\r\n\r\n  <angular-slickgrid gridId="grid5" [columnDefinitions]="columnDefinitions" [gridOptions]="gridOptions"\r\n                     [dataset]="dataset" (onGridStateChanged)="gridStateChanged($event)"\r\n                     (onAngularGridCreated)="angularGridReady($event)">\r\n  </angular-slickgrid>\r\n</div>'},HNE4:function(e,t){e.exports='\n<div id="demo-container" class="container-fluid">\n    <h2>{{title}}</h2>\n    <div class="subtitle" [innerHTML]="subTitle"></div>\n\n    <div class="col-md-6" style="margin-bottom: 15px">\n            <label>Octopart Catalog Search <small>(type a word then press ENTER)</small></label>\n            <input type="text" class="form-control" [value]="search" (change)="searchChanged($event.target.value)">\n    </div>\n\n    <div class="alert alert-warning col-md-6"\n        role="alert"\n        *ngIf="loading">\n        <i class="fa fa-refresh fa-spin fa-lg fa-fw"></i>\n        <span>Loading...</span>\n    </div>\n\n    <angular-slickgrid\n        gridId="grid18"\n        [columnDefinitions]="columnDefinitions"\n        [gridOptions]="gridOptions"\n        [dataset]="dataset"\n        [customDataView]="customDataView"\n        (onAngularGridCreated)="angularGridReady($event)"\n        (sgOnViewportChanged)="onViewportChanged($event.detail.eventData, $event.detail.args)"\n        (sgOnSort)="onSort($event.detail.eventData, $event.detail.args)">\n    </angular-slickgrid>\n  </div>\n'},IGMT:function(e,t){e.exports='<div id="demo-container"\r\n  class="container-fluid">\r\n  <h2>{{title}}</h2>\r\n  <div class="subtitle"\r\n    [innerHTML]="subTitle"></div>\r\n\r\n  <button class="btn btn-outline-secondary btn-sm"\r\n    (click)="togglePauseResizer()">\r\n    Pause auto-resize: <b>{{resizerPaused}}</b>\r\n  </button>\r\n\r\n  <angular-slickgrid gridId="grid2"\r\n    [columnDefinitions]="columnDefinitions"\r\n    [gridOptions]="gridOptions"\r\n    [dataset]="dataset"\r\n    (onAngularGridCreated)="angularGridReady($event)">\r\n  </angular-slickgrid>\r\n</div>'},IKRe:function(e,t){e.exports='<div id="demo-container"\r\n     class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle"\r\n         [innerHTML]="subTitle"></div>\r\n\r\n    <div class="row col-sm-12">\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="loadData(500)">\r\n            500 rows\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="loadData(50000)">\r\n            50k rows\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="clearGrouping()">\r\n            <i class="fa fa-times"></i> Clear grouping\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="collapseAllGroups()">\r\n            <i class="fa fa-compress"></i> Collapse all groups\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="expandAllGroups()">\r\n            <i class="fa fa-expand"></i> Expand all groups\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs" (click)="exportToExcel()">\r\n            <i class="fa fa-file-excel-o text-success"></i> Export to Excel\r\n        </button>\r\n    </div>\r\n    <hr />\r\n    <div class="row col-sm-12">\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="groupByDuration()">\r\n            Group by duration &amp; sort groups by value\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="groupByDurationOrderByCount(false)">\r\n            Group by duration &amp; sort groups by count\r\n        </button>\r\n    </div>\r\n    <div class="row col-sm-12">\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="groupByDurationOrderByCount(true)">\r\n            Group by duration &amp; sort groups by count, aggregate collapsed\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="groupByDurationEffortDriven()">\r\n            Group by duration then effort-driven\r\n        </button>\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n                (click)="groupByDurationEffortDrivenPercent()">\r\n            Group by duration then effort-driven then percent.\r\n        </button>\r\n        <span [hidden]="!processing">\r\n            <i class="fa fa-refresh fa-spin fa-lg fa-fw"></i>\r\n        </span>\r\n    </div>\r\n\r\n    <angular-slickgrid gridId="grid2"\r\n                       [dataset]="dataset"\r\n                       [columnDefinitions]="columnDefinitions"\r\n                       [gridOptions]="gridOptions"\r\n                       (onGridBeforeExportToFile)="processing = true"\r\n                       (onGridAfterExportToFile)="processing = false"\r\n                       (onGridBeforeExportToExcel)="processing = true"\r\n                       (onGridAfterExportToExcel)="processing = false"\r\n                       (onAngularGridCreated)="angularGridReady($event)">\r\n    </angular-slickgrid>\r\n</div>'},LUAn:function(e,t){e.exports='<div id="demo-container"\r\n     class="container-fluid">\r\n  <h2>{{title}}</h2>\r\n  <div class="subtitle"\r\n       [innerHTML]="subTitle"></div>\r\n\r\n  <form class="form-inline">\r\n    <div class="row col-sm-12">\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="loadData(500)">\r\n        500 rows\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="loadData(50000)">\r\n        50k rows\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="clearGroupsAndSelects()">\r\n        <i class="fa fa-times"></i> Clear grouping\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="collapseAllGroups()">\r\n        <i class="fa fa-compress"></i> Collapse all groups\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="expandAllGroups()">\r\n        <i class="fa fa-expand"></i> Expand all groups\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="toggleDraggableGroupingRow()">\r\n        Toggle Draggable Grouping Row\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="exportToExcel()">\r\n        <i class="fa fa-file-excel-o text-success"></i> Export to Excel\r\n      </button>\r\n    </div>\r\n\r\n    <div class="row col-sm-12">\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="groupByDurationOrderByCount(false)">\r\n        Group by duration &amp; sort groups by value\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="groupByDurationOrderByCount(true)">\r\n        Group by duration &amp; sort groups by count\r\n      </button>\r\n      <button class="btn btn-outline-secondary btn-xs"\r\n              (click)="groupByDurationEffortDriven()">\r\n        Group by Duration &amp; then Effort-Driven\r\n      </button>\r\n    </div>\r\n\r\n    <div class="col-sm-12">\r\n      <br>\r\n    </div>\r\n\r\n    <div class="row col-sm-12">\r\n      <div class="form-row">\r\n        <div class="form-group">\r\n          <label for="field1"\r\n                 class="col-sm-3 mb-2">Group by field(s)</label>\r\n          <div class="form-group col-md-3"\r\n               *ngFor="let groupField of selectedGroupingFields; let i = index; trackBy: selectTrackByFn">\r\n            <select class="form-control"\r\n                    name="groupField{{i}}"\r\n                    [(ngModel)]="selectedGroupingFields[i]"\r\n                    (ngModelChange)="groupByFieldName($event, i)">\r\n              <option value=""></option>\r\n              <option [ngValue]="field.id"\r\n                      *ngFor="let field of columnDefinitions">{{field.name}}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <div class="col-sm-12">\r\n    <hr>\r\n  </div>\r\n\r\n  <angular-slickgrid gridId="grid19"\r\n                     [dataset]="dataset"\r\n                     [columnDefinitions]="columnDefinitions"\r\n                     [gridOptions]="gridOptions"\r\n                     (onAngularGridCreated)="angularGridReady($event)">\r\n  </angular-slickgrid>\r\n</div>'},Lw2E:function(e,t,i){var n={"./locale":"wCDk","./locale.js":"wCDk"};function r(e){var t=a(e);return i(t)}function a(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}r.keys=function(){return Object.keys(n)},r.resolve=a,e.exports=r,r.id="Lw2E"},MR6s:function(e,t){e.exports='<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <div class="row">\r\n        <div class="col-sm-5">\r\n            <div [class]="status.class" role="alert" data-test="status">\r\n                <strong>Status: </strong> {{status.text}}\r\n                <span [hidden]="!processing">\r\n                    <i class="fa fa-refresh fa-spin fa-lg fa-fw"></i>\r\n                </span>\r\n            </div>\r\n\r\n            <button class="btn btn-outline-secondary btn-sm" (click)="clearAllFiltersAndSorts()"\r\n                    title="Clear all Filters & Sorts">\r\n                <i class="fa fa-filter text-danger"></i>\r\n                Clear all Filter & Sorts\r\n            </button>\r\n            <button class="btn btn-outline-secondary btn-sm" (click)="switchLanguage()">\r\n                <i class="fa fa-language"></i>\r\n                Switch Language\r\n            </button>\r\n            <b>Locale:</b>\r\n            <span style="font-style: italic">{{selectedLanguage + \'.json\'}}</span>\r\n            <br />\r\n            <span *ngIf="metrics">\r\n                <b>Metrics:</b> {{metrics.endTime | date: \'yyyy-MM-dd HH:mm aaaaa\\\'m\\\'\'}} | {{metrics.executionTime}}ms\r\n                | {{metrics.totalItemCount}} items\r\n            </span>\r\n            <div class="row col-md-12">\r\n                <span>Programmatically go to first/last page:</span>\r\n                <button class="btn btn-outline-secondary btn-xs" (click)="goToFirstPage()">\r\n                    <i class="fa fa-caret-left fa-lg"></i>\r\n                </button>\r\n                <button class="btn btn-outline-secondary btn-xs" (click)="goToLastPage()">\r\n                    <i class="fa fa-caret-right fa-lg"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class="col-sm-7">\r\n            <div class="alert alert-info" data-test="alert-graphql-query">\r\n                <strong>GraphQL Query:</strong>\r\n                <div [innerHTML]="graphqlQuery" data-test="graphql-query-result"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <angular-slickgrid gridId="grid6" [gridHeight]="200" [gridWidth]="900" [columnDefinitions]="columnDefinitions"\r\n                       [gridOptions]="gridOptions" [dataset]="dataset" (onAngularGridCreated)="angularGridReady($event)"\r\n                       (onGridStateChanged)="gridStateChanged($event)"\r\n                       (onBeforeGridDestroy)="saveCurrentGridState($event)">\r\n    </angular-slickgrid>\r\n</div>'},Nmjf:function(e,t){e.exports='\r\n<div class="container" style="margin-top: 10px">\r\n\t<div class="col-sm-8">\r\n\t\t<div class="alert alert-info">\r\n\t\t\t<strong>Custom Pagination URL:</strong>\r\n\t\t\t<div [innerHTML]="currentUrl"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<swt-common-grid-pagination #commonGridPag1></swt-common-grid-pagination>\r\n\t<swt-common-grid #commonGrid1\r\n\t\t\t(onFilterChanged)="filterChanged($event)"\r\n\t\t\t(onPaginationChanged)="paginationChanged($event)"\r\n\t\t\t(onSortChanged)="sortChanged($event)"></swt-common-grid>\r\n</div>\r\n'},OV2u:function(e,t){e.exports='<div class="container">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n</div>\r\n'},"To/D":function(e,t){e.exports='<div class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <form class="form-inline">\r\n        <div class="form-group">\r\n            <label>Single Search: </label>\r\n            <select class="form-control" name="selectedColumn" [(ngModel)]="selectedColumn"\r\n                (ngModelChange)="updateFilter()">\r\n                <option [ngValue]="field" *ngFor="let field of columnDefinitions">{{field.name}}</option>\r\n            </select>\r\n\r\n            <select class="form-control" name="selectedOperator" [(ngModel)]="selectedOperator"\r\n                (ngModelChange)="updateFilter()">\r\n                <option [ngValue]="operator" *ngFor="let operator of operatorList">{{operator}}</option>\r\n            </select>\r\n\r\n            <input type="text" class="form-control" name="searchValue" placeholder="search value" autocomplete="off"\r\n                (input)="updateFilter()" [(ngModel)]="searchValue">\r\n        </div>\r\n    </form>\r\n\r\n    <hr />\r\n\r\n    <angular-slickgrid gridId="grid23" [columnDefinitions]="columnDefinitions" [gridOptions]="gridOptions"\r\n        [dataset]="dataset" (onAngularGridCreated)="angularGridReady($event)">\r\n    </angular-slickgrid>\r\n</div>'},Uogw:function(e,t){e.exports='\r\n<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <button class="btn btn-outline-secondary btn-sm" (click)="clearGridStateFromLocalStorage()">\r\n        <i class="fa fa-times"></i>\r\n        Clear Grid State from Local Storage &amp; Reset Grid\r\n    </button>\r\n\r\n    <angular-slickgrid gridId="grid16"\r\n              [columnDefinitions]="columnDefinitions"\r\n              [gridOptions]="gridOptions"\r\n              [dataset]="dataset"\r\n              (onAngularGridCreated)="angularGridReady($event)"\r\n              (onGridStateChanged)="gridStateChanged($event)"\r\n              (onBeforeGridDestroy)="saveCurrentGridState($event)">\r\n    </angular-slickgrid>\r\n  </div>\r\n'},W8EM:function(e,t){e.exports='\r\n<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <button class="btn btn-outline-secondary btn-sm" (click)="toggleGridMenu($event)">\r\n        <i class="fa fa-bars"></i>\r\n        Grid Menu\r\n    </button>\r\n    <button class="btn btn-outline-secondary btn-sm" (click)="switchLanguage()">\r\n        <i class="fa fa-language"></i>\r\n        Switch Language\r\n    </button>\r\n\r\n    <div class="col-sm-12">\r\n        <angular-slickgrid gridId="grid2"\r\n            (onAngularGridCreated)="angularGridReady($event)"\r\n            [columnDefinitions]="columnDefinitions"\r\n            [gridOptions]="gridOptions"\r\n            [dataset]="dataset">\r\n        </angular-slickgrid>\r\n    </div>\r\n</div>\r\n'},WqZd:function(e,t,i){var n={"./ar.js":"+OV3","./at.js":"Gt+8","./az.js":"il6R","./be.js":"oAMl","./bg.js":"9De2","./bn.js":"6Cpa","./bs.js":"uezu","./cat.js":"/iph","./cs.js":"EBSL","./cy.js":"Ton7","./da.js":"++FP","./de.js":"Jt8t","./default.js":"QM5T","./eo.js":"V7ZE","./es.js":"SYT2","./et.js":"gRVh","./fa.js":"eHtV","./fi.js":"ewub","./fo.js":"3Jt2","./fr.js":"Aid2","./ga.js":"AdcB","./gr.js":"W8vW","./he.js":"QhH9","./hi.js":"/v+a","./hr.js":"j+gB","./hu.js":"KV+S","./id.js":"AixY","./index.js":"y/pk","./is.js":"JSva","./it.js":"rmDh","./ja.js":"UMqg","./ka.js":"p01/","./km.js":"5Q0x","./ko.js":"VEU4","./kz.js":"0kzd","./lt.js":"YLy/","./lv.js":"18gA","./mk.js":"31E+","./mn.js":"5p1B","./ms.js":"fvCo","./my.js":"SEQC","./nl.js":"3uVB","./no.js":"uHQq","./pa.js":"wGah","./pl.js":"tXmi","./pt.js":"Io36","./ro.js":"ZV7w","./ru.js":"b/zg","./si.js":"fV5r","./sk.js":"cntR","./sl.js":"ks2o","./sq.js":"JrQ3","./sr-cyr.js":"z+zT","./sr.js":"DiE8","./sv.js":"mNSI","./th.js":"hSGY","./tr.js":"+AxM","./uk.js":"+zM+","./vn.js":"yAt/","./zh-tw.js":"Ombb","./zh.js":"3BxJ"};function r(e){var t=a(e);return i(t)}function a(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}r.keys=function(){return Object.keys(n)},r.resolve=a,e.exports=r,r.id="WqZd"},Y5DI:function(e,t){e.exports='<div id="demo-container"\r\n     class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle"\r\n         [innerHTML]="subTitle"></div>\r\n\r\n    <div class="col-sm-6">\r\n        <label>autoEdit setting: </label>\r\n        <span id="radioAutoEdit">\r\n            <label class="radio-inline control-label"\r\n                   for="radioTrue">\r\n                <input type="radio"\r\n                       name="inlineRadioOptions"\r\n                       id="radioTrue"\r\n                       checked\r\n                       [value]="isAutoEdit"\r\n                       (change)="setAutoEdit(true)"> ON (single-click)\r\n            </label>\r\n            <label class="radio-inline control-label"\r\n                   for="radioFalse">\r\n                <input type="radio"\r\n                       name="inlineRadioOptions"\r\n                       id="radioFalse"\r\n                       [value]="isAutoEdit"\r\n                       (change)="setAutoEdit(false)"> OFF (double-click)\r\n            </label>\r\n        </span>\r\n        <div class="row col-sm-12">\r\n            <span>\r\n                <button class="btn btn-outline-secondary btn-sm"\r\n                        (click)="undo()">\r\n                    <i class="fa fa-undo"></i>\r\n                    Undo last edit(s)\r\n                </button>\r\n                <button class="btn btn-outline-secondary btn-sm"\r\n                        (click)="angularGrid.filterService.clearFilters()">Clear Filters</button>\r\n                <button class="btn btn-outline-secondary btn-sm"\r\n                        (click)="angularGrid.sortService.clearSorting()">Clear\r\n                    Sorting</button>\r\n                <label class="checkbox-inline control-label"\r\n                       for="autoCommitEdit">\r\n                    <input type="checkbox"\r\n                           id="autoCommitEdit"\r\n                           [checked]="gridOptions.autoCommitEdit"\r\n                           (click)="changeAutoCommit()">\r\n                    Auto Commit Edit\r\n                </label>\r\n            </span>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class="col-sm-6">\r\n        <div class="alert alert-info"\r\n             *ngIf="updatedObject">\r\n            <strong>Updated Item:</strong> {{updatedObject | json}}\r\n        </div>\r\n        <div class="alert alert-warning"\r\n             *ngIf="alertWarning">\r\n            <strong>Updated Item:</strong> {{alertWarning}}\r\n        </div>\r\n    </div>\r\n\r\n    <div class="col-sm-12">\r\n        <angular-slickgrid gridId="grid22"\r\n                           (onAngularGridCreated)="angularGridReady($event)"\r\n                           (sgOnCellChange)="onCellChanged($event.detail.eventData, $event.detail.args)"\r\n                           (sgOnClick)="onCellClicked($event.detail.eventData, $event.detail.args)"\r\n                           (sgOnValidationError)="onCellValidation($event.detail.eventData, $event.detail.args)"\r\n                           [columnDefinitions]="columnDefinitions"\r\n                           [gridOptions]="gridOptions"\r\n                           [dataset]="dataset">\r\n        </angular-slickgrid>\r\n    </div>\r\n</div>'},ZiwD:function(e,t){e.exports='<div class="container-fluid">\r\n        <h2>{{title}}</h2>\r\n        <div class="subtitle"\r\n                [innerHTML]="subTitle"></div>\r\n\r\n        <br />\r\n        <span *ngIf="metrics"\r\n                style="margin-right: 10px">\r\n                <b>Metrics:</b> {{metrics.startTime | date: \'yyyy-MM-dd HH:mm aaaaa\\\'m\\\'\'}} |\r\n                {{metrics.itemCount}} of\r\n                {{metrics.totalItemCount}} items\r\n        </span>\r\n        <button class="btn btn-outline-secondary btn-sm"\r\n                (click)="angularGrid.filterService.clearFilters()">Clear Filters</button>\r\n        <button class="btn btn-outline-secondary btn-sm"\r\n                (click)="angularGrid.sortService.clearSorting()">Clear Sorting</button>\r\n        <button class="btn btn-outline-secondary btn-sm"\r\n                (click)="switchLanguage()"\r\n                data-test="language">\r\n                <i class="fa fa-language"></i>\r\n                Switch Language\r\n        </button>\r\n        <b>Locale:</b> <span style="font-style: italic"\r\n                data-test="selected-locale">{{selectedLanguage + \'.json\'}}</span>\r\n\r\n        <angular-slickgrid gridId="grid25"\r\n                [columnDefinitions]="columnDefinitions"\r\n                [gridOptions]="gridOptions"\r\n                [dataset]="dataset"\r\n                (onAngularGridCreated)="angularGridReady($event)"\r\n                (onGridStateChanged)="gridStateChanged($event)"\r\n                (onBeforeGridDestroy)="saveCurrentGridState($event)"\r\n                (sgOnRowCountChanged)="refreshMetrics($event.detail.eventData, $event.detail.args)">\r\n        </angular-slickgrid>\r\n</div>'},aSjM:function(e,t){e.exports='<div class="container" style="margin-top: 10px">\r\n    <h2>{{model?.title}}</h2>\r\n    <div class="row">\r\n      <div class="col-sm-3"><label>Assignee:</label> <input class="form-control" [(ngModel)]="model.assignee" /></div>\r\n      <div class="col-sm-3"><label>Reporter:</label> <span>{{model?.reporter}}</span></div>\r\n      <div class="col-sm-2"><label>Duration:</label> <span>{{model?.duration}}</span></div>\r\n      <div class="col-sm-2"><label>% Complete:</label> <span>{{model?.percentComplete}}</span></div>\r\n    </div>\r\n\r\n    <div class="row">\r\n      <div class="col-sm-3"><label>Start:</label> <span>{{model?.start | date: \'yyyy-MM-dd\'}}</span></div>\r\n      <div class="col-sm-3"><label>Finish:</label> <span>{{model?.finish | date: \'yyyy-MM-dd\'}}</span></div>\r\n      <div class="col-sm-2"><label>Effort Driven:</label> <i [class]="model?.effortDriven ? \'fa fa-check\' : \'\'"></i></div>\r\n    </div>\r\n\r\n    <hr>\r\n\r\n    <h4>\r\n      Find out who is the Assignee\r\n      <small>\r\n        <button class="btn btn-primary btn-sm" (click)="alertAssignee(model?.assignee)">Click Me</button>\r\n      </small>\r\n    </h4>\r\n  </div>\r\n'},ad2g:function(e,t){e.exports='\n<div id="demo-container" class="container-fluid">\n    <h2>{{title}}</h2>\n    <div class="subtitle" [innerHTML]="subTitle"></div>\n\n    <angular-slickgrid gridId="grid17"\n        (onAngularGridCreated)="angularGridReady($event)"\n        [columnDefinitions]="columnDefinitions"\n        [gridOptions]="gridOptions"\n        [dataset]="dataset">\n    </angular-slickgrid>\n</div>\n'},cHcR:function(e,t){e.exports='\r\n<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <div class="col-sm-12">\r\n        <angular-slickgrid gridId="grid2" (onDataviewCreated)="dataviewReady($event)" (onGridCreated)="gridReady($event)"\r\n            [columnDefinitions]="columnDefinitions" [gridOptions]="gridOptions" [dataset]="dataset">\r\n        </angular-slickgrid>\r\n    </div>\r\n</div>\r\n'},crnd:function(e,t){function i(e){return Promise.resolve().then(function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t})}i.keys=function(){return[]},i.resolve=i,e.exports=i,i.id="crnd"},fsdD:function(e,t){e.exports='<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <hr />\r\n\r\n    <div class="row col-sm-12">\r\n        <button class="btn btn-outline-secondary btn-sm" (click)="switchLanguage()">\r\n            <i class="fa fa-language"></i>\r\n            Switch Language\r\n        </button>\r\n        <b>Locale:</b> <span style="font-style: italic">{{selectedLanguage + \'.json\'}}</span>\r\n\r\n        <span style="margin-left: 20px">\r\n            <button class="btn btn-outline-secondary btn-sm" (click)="exportToFile(\'csv\')">\r\n                <i class="fa fa-download"></i>\r\n                Download to CSV\r\n            </button>\r\n            <button class="btn btn-outline-secondary btn-sm" (click)="exportToFile(\'txt\')">\r\n                <i class="fa fa-download"></i>\r\n                Download to Text\r\n            </button>\r\n            <button class="btn btn-outline-secondary btn-sm" (click)="exportToExcel()">\r\n                <i class="fa fa-file-excel-o text-success"></i>\r\n                Download to Excel\r\n            </button>\r\n            <button class="btn btn-outline-secondary btn-sm" (click)="dynamicallyAddTitleHeader()">\r\n                <i class="fa fa-plus"></i>\r\n                Dynamically Duplicate Title Column\r\n            </button>\r\n        </span>\r\n    </div>\r\n\r\n    <div class="col-sm-12">\r\n        <angular-slickgrid gridId="grid12"\r\n                           (onAngularGridCreated)="angularGridReady($event)"\r\n                           [columnDefinitions]="columnDefinitions"\r\n                           [gridOptions]="gridOptions"\r\n                           [dataset]="dataset">\r\n        </angular-slickgrid>\r\n    </div>\r\n</div>'},lILz:function(e,t){e.exports='<nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">\r\n  <a class="navbar-brand"\r\n    href="https://github.com/ghiscoding/Angular-Slickgrid">\r\n    <i class="fa fa-github"></i>\r\n    <span>{{title}}</span>\r\n  </a>\r\n  <button class="navbar-toggler"\r\n    type="button"\r\n    data-toggle="collapse"\r\n    data-target="#navbarContent"\r\n    aria-controls="navbarContent"\r\n    aria-expanded="false"\r\n    aria-label="Toggle navigation">\r\n    <span class="navbar-toggler-icon"></span>\r\n  </button>\r\n\r\n  <div class="navbar-collapse collapse"\r\n    id="navbarContent">\r\n    <ul class="navbar-nav mr-auto">\r\n      <li>\r\n        <span class="nav-link"\r\n          style="position: relative; top: 5px">\r\n          <iframe allowtransparency="true"\r\n            scrolling="no"\r\n            frameborder="0"\r\n            src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fghiscoding%2FAngular-Slickgrid&amp;aria-label=Star%20ghiscoding%2FAngular-Slickgrid%20on%20GitHub&amp;data-icon=octicon-star&amp;data-text=Star&amp;data-show-count=true"\r\n            style="width: 90px; height: 20px; border: none;"></iframe>\r\n        </span>\r\n      </li>\r\n      <li class="nav-item">\r\n        <a class="nav-link"\r\n          [routerLink]="[\'/home\']">\r\n          <i class="fa fa-lg fa-home"></i> Home\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</nav>\r\n\r\n<div class="container-fluid">\r\n  <div class="panel-wm">\r\n    <section id="panel-left"\r\n      class="panel-wm-left">\r\n      <ul class="well nav nav-pills nav-stacked">\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/basic\']">1- Basic Grid / 2 Grids</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/formatter\']">2- Formatters</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/editor\']">3- Editors</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/clientside\']">4- Client Side Sort/Filter</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/odata\']">5- Backend Server with OData</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/gridgraphql\']">6- Backend Server with\r\n            GraphQL</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/headerbutton\']">7- Header Button Plugin</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/headermenu\']">8- Header Menu Plugin</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/gridmenu\']">9- Grid Menu (hamburger menu)</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/selection\']">10- Row Selection / 2 Grids</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/additem\']">11- Add/Update/Highlight Datagrid\r\n            Item</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/localization\']">12- Localization (i18n)</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/swt\']">13- Backend Server Custom Paging</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/grouping\']">14- Grouping &amp; Aggregator</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/colspan\']">15- Column Span</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/gridstate\']">16- Grid State &amp; Local\r\n            Storage</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/rowmove\']">17- Row Move</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/remote\']">18- Remote Model</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/draggrouping\']">19- Draggable Grouping</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/frozen\']">20- Frozen Columns/Rows</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/rowdetail\']">21- Row Detail View</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/angular-components\']">22- Use of Angular\r\n            Components</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/autoheight\']">23- Grid AutoHeight (full\r\n            height)</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/gridtabs\']">24- within Bootstrap Tabs</a>\r\n        </li>\r\n        <li class="nav-item">\r\n          <a class="nav-link"\r\n            routerLinkActive="active"\r\n            [routerLink]="[\'/range\']">25- Filter by Range of Values</a>\r\n        </li>\r\n      </ul>\r\n    </section>\r\n\r\n    <section class="panel-wm-content">\r\n      <div id="demo-container">\r\n        <router-outlet></router-outlet>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>'},mu9r:function(e,t){e.exports='<div class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle"\r\n        [innerHTML]="subTitle"></div>\r\n\r\n    <div>\r\n        <tabset>\r\n            <tab heading="Javascript"\r\n                id="javascript">\r\n                <h4>Grid 1 - Load Local Data</h4>\r\n                <angular-slickgrid gridId="grid1"\r\n                    [columnDefinitions]="columnDefinitions1"\r\n                    [gridOptions]="gridOptions1"\r\n                    [dataset]="dataset1">\r\n                </angular-slickgrid>\r\n            </tab>\r\n            <tab heading="Http-Client"\r\n                (selectTab)="resizeGrid2()">\r\n                <h4>Grid 2 - Load a JSON dataset through Http-Client</h4>\r\n                <angular-slickgrid gridId="grid2"\r\n                    [columnDefinitions]="columnDefinitions2"\r\n                    [gridOptions]="gridOptions2"\r\n                    [dataset]="dataset2"\r\n                    (onAngularGridCreated)="angularGrid2Ready($event)">\r\n                </angular-slickgrid>\r\n            </tab>\r\n        </tabset>\r\n    </div>\r\n</div>'},pI45:function(e,t){e.exports='<div id="demo-container"\r\n    class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle"\r\n        [innerHTML]="subTitle"></div>\r\n\r\n    <div class="col-sm-6">\r\n        <label>autoEdit setting</label>\r\n        <span id="radioAutoEdit">\r\n            <label class="radio-inline control-label"\r\n                for="radioTrue">\r\n                <input type="radio"\r\n                    name="inlineRadioOptions"\r\n                    id="radioTrue"\r\n                    checked\r\n                    [value]="isAutoEdit"\r\n                    (change)="setAutoEdit(true)"> ON (single-click)\r\n            </label>\r\n            <label class="radio-inline control-label"\r\n                for="radioFalse">\r\n                <input type="radio"\r\n                    name="inlineRadioOptions"\r\n                    id="radioFalse"\r\n                    [value]="isAutoEdit"\r\n                    (change)="setAutoEdit(false)"> OFF (double-click)\r\n            </label>\r\n        </span>\r\n        <div class="row col-sm-12">\r\n            <span>\r\n                <button class="btn btn-outline-secondary btn-sm"\r\n                    (click)="undo()">\r\n                    <i class="fa fa-undo"></i>\r\n                    Undo last edit(s)\r\n                </button>\r\n                <label class="checkbox-inline control-label"\r\n                    for="autoCommitEdit">\r\n                    <input type="checkbox"\r\n                        id="autoCommitEdit"\r\n                        [checked]="gridOptions.autoCommitEdit"\r\n                        (click)="changeAutoCommit()">\r\n                    Auto Commit Edit\r\n                </label>\r\n            </span>\r\n        </div>\r\n        <div class="row"\r\n            style="margin-top: 5px">\r\n            <button class="btn btn-outline-secondary btn-sm"\r\n                (click)="angularGrid.filterService.clearFilters()">Clear\r\n                Filters</button>\r\n            <button class="btn btn-outline-secondary btn-sm"\r\n                (click)="angularGrid.sortService.clearSorting()">Clear\r\n                Sorting</button>\r\n            <button class="btn btn-sm btn-outline-info"\r\n                (click)="addItem()"\r\n                title="Clear Filters &amp; Sorting to see it better">Add item</button>\r\n            <button class="btn btn-sm btn-outline-danger"\r\n                (click)="deleteItem()">Delete item</button>\r\n            <button class="btn btn-outline-secondary btn-sm"\r\n                (click)="dynamicallyAddTitleHeader()">\r\n                <i class="fa fa-plus"></i>\r\n                Dynamically Duplicate Title Column\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="col-sm-6">\r\n        <div class="alert alert-info"\r\n            *ngIf="updatedObject">\r\n            <strong>Updated Item:</strong> {{updatedObject | json}}\r\n        </div>\r\n        <div class="alert alert-warning"\r\n            *ngIf="alertWarning">\r\n            <strong>Updated Item:</strong> {{alertWarning}}\r\n        </div>\r\n    </div>\r\n\r\n    <div class="col-sm-12">\r\n        <angular-slickgrid gridId="grid2"\r\n            (onAngularGridCreated)="angularGridReady($event)"\r\n            (sgOnCellChange)="onCellChanged($event.detail.eventData, $event.detail.args)"\r\n            (sgOnClick)="onCellClicked($event.detail.eventData, $event.detail.args)"\r\n            (sgOnValidationError)="onCellValidation($event.detail.eventData, $event.detail.args)"\r\n            [columnDefinitions]="columnDefinitions"\r\n            [gridOptions]="gridOptions"\r\n            [dataset]="dataset">\r\n        </angular-slickgrid>\r\n    </div>\r\n</div>'},r1Mw:function(e,t){e.exports='\r\n<div id="demo-container" class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle" [innerHTML]="subTitle"></div>\r\n\r\n    <div class="col-sm-12">\r\n        <angular-slickgrid gridId="grid2"\r\n            (onAngularGridCreated)="angularGridReady($event)"\r\n            (onDataviewCreated)="dataviewReady($event)"\r\n            (onGridCreated)="gridReady($event)"\r\n            [columnDefinitions]="columnDefinitions"\r\n            [gridOptions]="gridOptions"\r\n            [dataset]="dataset">\r\n        </angular-slickgrid>\r\n    </div>\r\n</div>\r\n'},"sx++":function(e,t){e.exports="/** You can change the pinned/frozen border styling through this css override */\n.slick-row .slick-cell.frozen:last-child,\n.slick-headerrow-column.frozen:last-child,\n.slick-footerrow-column.frozen:last-child {\n  border-right: 1px solid #969696 !important; }\n.slick-pane-bottom {\n  border-top: 1px solid #969696 !important; }\n"},tsvY:function(e,t){e.exports='<div class="container-fluid">\r\n    <h2>{{title}}</h2>\r\n    <div class="subtitle"\r\n        [innerHTML]="subTitle"></div>\r\n\r\n    <span>\r\n        <button class="btn btn-outline-secondary btn-sm"\r\n            (click)="closeAllRowDetail()">\r\n            Close All Row Details\r\n        </button>\r\n        &nbsp;&nbsp;\r\n        <label for="">Detail View Rows Shown: </label>\r\n        <input type="number"\r\n            [(ngModel)]="detailViewRowCount">\r\n        <button class="btn btn-outline-secondary btn-xs"\r\n            (click)="changeDetailViewRowCount()">\r\n            Set\r\n        </button>\r\n    </span>\r\n\r\n    <hr />\r\n\r\n    <angular-slickgrid gridId="grid21"\r\n        [columnDefinitions]="columnDefinitions"\r\n        [gridOptions]="gridOptions"\r\n        [dataset]="dataset"\r\n        (onAngularGridCreated)="angularGridReady($event)">\r\n    </angular-slickgrid>\r\n</div>'},wSoe:function(e,t){e.exports="/** You can change the pinned/frozen border styling through this css override */\n.slick-row .slick-cell.frozen:last-child,\n.slick-headerrow-column.frozen:last-child,\n.slick-footerrow-column.frozen:last-child {\n  border-right: 1px solid #969696 !important; }\n.slick-pane-bottom {\n  border-top: 1px solid #969696 !important; }\n"},ynWL:function(e,t){e.exports=".body-content {\n  margin-top: 58px; }\n\n.lightblue {\n  color: lightblue; }\n\n.red {\n  color: red; }\n\n.faded {\n  opacity: 0.2; }\n\n.faded:hover {\n  opacity: 0.5; }\n\nsection {\n  margin: 0; }\n\n/** Sidebar (left) and Content (right) */\n\n@media (min-width: 1200px) {\n  .panel-wm-content .container {\n    width: calc(1170px - $side-menu-width); } }\n\n.panel-wm {\n  padding-top: 58px; }\n\n.panel-wm .nav-stacked {\n    padding-bottom: 30px; }\n\n.panel-wm .nav-stacked .nav-item {\n      width: 100%; }\n\n.panel-wm .nav > li > a {\n    padding: 10px 15px;\n    border-radius: 0; }\n\n.panel-wm .panel-wm-content {\n    padding-left: 255px;\n    padding-right: 15px; }\n\n.panel-wm .panel-wm-left {\n    position: fixed;\n    z-index: 400;\n    transition: left 0.15s;\n    top: calc(58px);\n    bottom: 0;\n    left: 0;\n    background-color: #f5f5f5;\n    transform: translate3d(0, 0, 0);\n    border-right: 1px solid #d0d0d0;\n    overflow-y: auto;\n    width: 250px; }\n"},zUnb:function(e,t,i){"use strict";i.r(t);var n=i("8Y7J"),r=i("wAiw"),a=i("mrSG"),o=i("iInd"),l=i("3D+f");let s=class{constructor(){this.title="Example 11: Add / Update / Highlight a Datagrid Item",this.subTitle='\n  Add / Update / Hightlight an Item from the Datagrid (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Add,-Update-or-Highlight-a-Datagrid-Item" target="_blank">Wiki docs</a>).\n  <ul>\n    <li><b>Note:</b> this demo is <b>only</b> on the datagrid (client) side, you still need to deal with the backend yourself</li>\n    <li>Adding an item, will always be showing as the 1st item in the grid because that is the best visual place to add it</li>\n    <li>Add/Update an item requires a valid Slickgrid Selection Model, you have 2 choices to deal with this:</li>\n    <ul><li>You can enable "enableCheckboxSelector" or "enableRowSelection" to True</li></ul>\n    <li>Click on any of the buttons below to test this out</li>\n    <li>You can change the highlighted color &amp; animation by changing the <a href="https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/modules/angular-slickgrid/styles/_variables.scss" target="_blank">SASS Variables</a>:</li>\n    <ul>\n      <li>"$row-highlight-background-color" or "$row-highlight-fade-animation"</li>\n    </ul>\n    <li>You can also add CSS class(es) on the fly (or on page load) on rows with certain criteria, (e.g. click on last button)\n    <ul>\n      <li>Example, click on button "Highlight Rows with Duration over 50" to see row styling changing. <a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Dynamically-Add-CSS-Classes-to-Item-Rows" target="_blank">Wiki doc</a></li>\n    </ul>\n  </ul>\n  '}angularGridReady(e){this.angularGrid=e,this.dataView=e.dataView,this.grid=e.slickGrid,this.gridService=e.gridService}ngOnInit(){this.columnDefinitions=[{id:"delete",field:"id",excludeFromHeaderMenu:!0,formatter:l.l.deleteIcon,minWidth:30,maxWidth:30,onCellClick:(e,t)=>{console.log(t),confirm("Are you sure?")&&this.angularGrid.gridService.deleteDataGridItemById(t.dataContext.id)}},{id:"title",name:"Title",field:"title",sortable:!0,type:l.i.string,editor:{model:l.g.longText}},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:l.i.number,editor:{model:l.g.text},onCellChange:(e,t)=>{alert("onCellChange directly attached to the column definition"),console.log(t)}},{id:"complete",name:"% Complete",field:"percentComplete",formatter:l.l.percentCompleteBar,type:l.i.number,editor:{model:l.g.integer}},{id:"start",name:"Start",field:"start",formatter:l.l.dateIso,sortable:!0,type:l.i.date},{id:"finish",name:"Finish",field:"finish",formatter:l.l.dateIso,sortable:!0,type:l.i.date},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",formatter:l.l.checkmark,type:l.i.number,editor:{model:l.g.checkbox}}],this.gridOptions={asyncEditorLoading:!1,autoResize:{containerId:"demo-container",sidePadding:15},editable:!0,enableColumnPicker:!0,enableCellNavigation:!0,enableRowSelection:!0};const e=[];for(let t=0;t<1e3;t++){const i=2e3+Math.floor(10*Math.random()),n=Math.floor(11*Math.random()),r=Math.floor(29*Math.random()),a=Math.round(100*Math.random());e[t]={id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:a,percentCompleteNumber:a,start:new Date(i,n,r),finish:new Date(i,n+1,r),effortDriven:t%5==0}}this.dataset=e}addNewItem(e){const t=this.dataset.length,i=2e3+Math.floor(10*Math.random()),n=Math.floor(11*Math.random()),r=Math.floor(29*Math.random()),a=Math.round(100*Math.random()),o={id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:a,percentCompleteNumber:a,start:new Date(i,n,r),finish:new Date(i,n+2,r),effortDriven:!0};this.angularGrid.gridService.addItem(o,{position:e})}highlighFifthRow(){this.scrollGridTop(),this.angularGrid.gridService.highlightRow(4,1500)}changeDurationBackgroundColor(){this.dataView.getItemMetadata=this.updateItemMetadataForDurationOver50(this.dataView.getItemMetadata),this.grid.invalidate(),this.grid.render()}updateItemMetadataForDurationOver50(e){return t=>{const i=this.dataView.getItem(t);let n={cssClasses:""};if("object"==typeof e&&(n=e(t)),n&&i&&i.duration){+i.duration>50&&(n.cssClasses=(n.cssClasses||"")+" duration-bg")}return n}}updateSecondItem(){this.scrollGridTop();const e=this.angularGrid.gridService.getDataItemByRowNumber(1);e.duration=Math.round(100*Math.random()),this.angularGrid.gridService.updateItem(e)}scrollGridBottom(){this.angularGrid.slickGrid.navigateBottom()}scrollGridTop(){this.angularGrid.slickGrid.navigateTop()}};s=a.b([Object(n.n)({encapsulation:n.mb.None,template:i("1O9H"),styles:[".duration-bg { background-color: #e9d4f1 !important }"]}),Object(n.B)(),a.c("design:paramtypes",[])],s);var d=i("TSSN"),c=i("XNiG");let u=class{constructor(){this.onItemChanged=new c.a}onChange(e){this.selectedItem=e,this.onItemChanged.next(e)}focus(){}};u=a.b([Object(n.n)({template:'\n  <ng-select class="no-style-select"\n      [items]="collection"\n      autofocus\n      bindValue="id"\n      bindLabel="name"\n      appendTo="body"\n      [clearable]="false"\n      (change)="onChange($event)"\n      [(ngModel)]="selectedId"\n\t\t>\n\t\t\t<ng-template ng-label-tmp ng-option-tmp let-item="item">\n\t\t\t\t{{ item?.name }}\n\t\t\t</ng-template>\n\t\t</ng-select>'})],u);let m=class{constructor(){this.dropdownId="myDrop",this.dropDownToggleId="toggleDrop"}};m=a.b([Object(n.n)({template:'\n  <div id="{{dropdownId}}" class="dropdown" style="position:absolute; z-index:12000;">\n    <a class="dropdown-toggle"\n       id="{{dropDownToggleId}}" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n      Actions\n      <span class="caret"></span>\n    </a>\n    <div class="dropdown-menu padding10">\n      <div class="text-primary text-center">{{dataContext.title}}</div>\n      <div class="dropdown-divider"></div>\n      <a class="pointer">Another action</a>\n      <a class="pointer">Something else here</a>\n      <div class="dropdown-divider"></div>\n      <a class="text-danger pointer" (click)="parent.deleteCell(row)">Delete Row</a>\n    </div>\n  </div>\n  '})],m);class h{constructor(e){this.args=e,this.grid=e&&e.grid,this.init()}get angularUtilService(){let e=this.gridOptions&&this.gridOptions.params&&this.gridOptions.params.angularUtilService;return e&&e instanceof l.d||(e=this.columnEditor&&this.columnEditor.params&&this.columnEditor.params.angularUtilService),e}get collection(){return this.columnDef&&this.columnDef.internalColumnEditor.collection||[]}get columnDef(){return this.args&&this.args.column||{}}get columnEditor(){return this.columnDef&&this.columnDef.internalColumnEditor||{}}get gridOptions(){return this.grid&&this.grid.getOptions?this.grid.getOptions():{}}get hasAutoCommitEdit(){return this.gridOptions.autoCommitEdit}get validator(){return this.columnEditor.validator||this.columnDef.validator}init(){if(!(this.columnEditor&&this.columnEditor.params.component&&this.angularUtilService instanceof l.d))throw new Error("[Angular-Slickgrid] For Editor with Angular Component to work properly, you need to provide your component to the \"component\" property and make sure to add it to your \"entryComponents\" array.\n      You also need to provide the \"AngularUtilService\" via the Editor Params OR the Grid Options Params\n      Example: this.columnDefs = [{ id: 'title', field: 'title', editor: { model: CustomAngularComponentEditor, collection: [...], params: { component: MyComponent, angularUtilService: this.angularUtilService }}];\n      OR this.columnDefs = [{ id: 'title', field: 'title', editor: { model: CustomAngularComponentEditor, collection: [...] }]; this.gridOptions = { params: { angularUtilService: this.angularUtilService }}");if(this.columnEditor&&this.columnEditor.params.component){const e=this.angularUtilService.createAngularComponentAppendToDom(this.columnEditor.params.component,this.args.container);this.componentRef=e&&e.componentRef,Object.assign(this.componentRef.instance,{collection:this.collection}),this.changeSubscriber=this.componentRef.instance.onItemChanged.subscribe(e=>{this.save()})}}save(){const e=this.validate();e&&e.valid&&(this.hasAutoCommitEdit?this.args.grid.getEditorLock().commitCurrentEdit():this.args.commitChanges())}cancel(){this.componentRef.instance.selectedId=this.defaultId,this.componentRef.instance.selectedItem=this.defaultItem,this.args&&this.args.cancelChanges&&this.args.cancelChanges()}hide(){this.componentRef&&this.componentRef.instance&&"function"==typeof this.componentRef.instance.hide&&this.componentRef.instance.hide()}show(){this.componentRef&&this.componentRef.instance&&"function"==typeof this.componentRef.instance.show&&this.componentRef.instance.show()}destroy(){this.componentRef&&this.componentRef.destroy&&(this.componentRef.destroy(),this.changeSubscriber.unsubscribe())}focus(){this.componentRef&&this.componentRef.instance&&"function"==typeof this.componentRef.instance.focus&&this.componentRef.instance.focus()}applyValue(e,t){e[this.columnDef.field]=t}getValue(){return this.componentRef.instance.selectedId}loadValue(e){const t=e&&e[this.columnDef.field];this.componentRef.instance.selectedId=t&&t.id||"",this.componentRef.instance.selectedItem=t&&t}serializeValue(){return this.componentRef.instance.selectedItem}isValueChanged(){return!(""===this.componentRef.instance.selectedId&&null==this.defaultId)&&this.componentRef.instance.selectedId!==this.defaultId}validate(){if(this.validator){const e=this.componentRef.instance.selectedId,t=this.validator(e,this.args);if(!t.valid)return t}return{valid:!0,msg:null}}}h.ctorParameters=()=>[{type:void 0}];class g{constructor(){this.operator=l.q.equal}get angularUtilService(){let e=this.gridOptions&&this.gridOptions.params&&this.gridOptions.params.angularUtilService;return e&&e instanceof l.d||(e=this.columnFilter&&this.columnFilter.params&&this.columnFilter.params.angularUtilService),e}get collection(){return this.columnFilter&&this.columnFilter.collection||[]}get columnFilter(){return this.columnDef&&this.columnDef.filter||{}}get gridOptions(){return this.grid&&this.grid.getOptions?this.grid.getOptions():{}}init(e){if(this.grid=e.grid,this.callback=e.callback,this.columnDef=e.columnDef,this.searchTerms=e.searchTerms||[],!(this.columnFilter&&this.columnFilter.params.component&&this.angularUtilService instanceof l.d))throw new Error("[Angular-Slickgrid] For Filter with Angular Component to work properly, you need to provide your component to the \"component\" property and make sure to add it to your \"entryComponents\" array.\n      You also need to provide the \"AngularUtilService\" via the Filter Params OR the Grid Options Params\n      Example: this.columnDefs = [{ id: 'title', field: 'title', filter: { model: CustomAngularComponentFilter, collection: [...], params: { component: MyComponent, angularUtilService: this.angularUtilService }}];\n      OR this.columnDefs = [{ id: 'title', field: 'title', filter: { model: CustomAngularComponentFilter, collection: [...] }]; this.gridOptions = { params: { angularUtilService: this.angularUtilService }}");this.columnFilter&&this.columnFilter.params.component&&setTimeout(()=>{const e=this.grid.getHeaderRowColumn(this.columnDef.id);$(e).empty();const t=this.angularUtilService.createAngularComponentAppendToDom(this.columnFilter.params.component,e);this.componentRef=t.componentRef,Object.assign(t.componentRef.instance,{collection:this.collection}),this.changeSubscriber=t.componentRef.instance.onItemChanged.subscribe(e=>{this.callback(void 0,{columnDef:this.columnDef,operator:this.operator,searchTerms:[e.id]})})})}clear(){this.componentRef&&this.componentRef.instance&&this.componentRef.instance.hasOwnProperty("selectedId")&&(this.componentRef.instance.selectedId=0)}destroy(){this.componentRef&&this.componentRef.destroy&&(this.componentRef.destroy(),this.changeSubscriber.unsubscribe())}setValues(e){this.componentRef&&this.componentRef.instance&&this.componentRef.instance.hasOwnProperty("selectedId")&&(this.componentRef.instance.selectedId=e)}}let p=class{};p=a.b([Object(n.n)({template:"<b>{{item?.assignee?.name}}</b>"})],p);let f=class{constructor(){this.onItemChanged=new c.a}onChange(e){this.selectedItem=e,this.onItemChanged.next(e)}};f=a.b([Object(n.n)({template:'\n  <ng-select class="custom no-style-select"\n      [items]="collection"\n      bindValue="id"\n      bindLabel="name"\n      [clearable]="false"\n      appendTo="#root-container"\n      (change)="onChange($event)"\n      [(ngModel)]="selectedId"\n\t\t>\n\t\t\t<ng-template ng-label-tmp ng-option-tmp let-item="item">\n\t\t\t\t{{ item?.name }}\n\t\t\t</ng-template>\n\t\t</ng-select>'})],f);let b=class{constructor(e,t,i){this.angularUtilService=e,this.bsDropdown=t,this.translate=i,this.title="Example 22: Use of Angular Components",this.subTitle='\n  <h3>Filters, Editors, AsyncPostRender with Angular Components</h3>\n  Grid with usage of Angular Components as Editor &amp; AsyncPostRender (similar to Formatter).\n  <ul>\n    <li>Support of Angular Component as Custom Editor (click on any "Assignee" name cell)</li>\n    <ul>\n      <li>That column uses <a href="https://github.com/ng-select/ng-select" target="_blank">ng-select</a> as a custom editor as an Angular Component\n      <li>Increased Grid Options "rowHeight" &amp; "headerRowHeight" to 45 so that the "ng-select" fits in the cell. Ideally it would be better to override the ng-select css styling to change it\'s max height</li>\n    </ul>\n    <li>Support of Angular Component as Custom Filter ("Assignee" columns), which also uses "ng-select"\n    <li>The 2nd "Assignee" column (showing in bold text) uses "asyncPostRender" with an Angular Component</li>\n    <ul>\n      <li>Why can\'t we use Angular Component as Customer Formatter and why do I see a slight delay in loading the data?</li>\n      <li>It\'s totally normal since SlickGrid Formatters only accept strings (synchronously),\n      so we cannot use that (Angular requires at least 1 full cycle to render the element), so we are left with SlickGrid "asyncPostRender" and\n      it works but as the name suggest it\'s async users might see noticeable delay in loading the data\n      </li>\n    </ul>\n  </ul>\n  ',this._commandQueue=[],this.isAutoEdit=!0,this.selectedLanguage="en",this.assignees=[{id:"",name:""},{id:"1",name:"John"},{id:"2",name:"Pierre"},{id:"3",name:"Paul"}]}ngOnInit(){this.prepareGrid()}angularGridReady(e){this.angularGrid=e,this.gridObj=e.slickGrid}prepareGrid(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",minWidth:100,filterable:!0,sortable:!0,type:l.i.string,editor:{model:l.g.longText},onCellChange:(e,t)=>{console.log(t),this.alertWarning=`Updated Title: ${t.dataContext.title}`}},{id:"assignee",name:"Assignee",field:"assignee",minWidth:100,filterable:!0,sortable:!0,filter:{model:new g,collection:this.assignees,params:{component:f}},queryFieldFilter:"assignee.id",queryFieldSorter:"assignee.name",formatter:l.l.complexObject,params:{complexFieldLabel:"assignee.name"},exportWithFormatter:!0,editor:{model:h,collection:this.assignees,params:{component:u}},onCellChange:(e,t)=>{console.log(t),this.alertWarning=`Updated Title: ${t.dataContext.title}`}},{id:"assignee2",name:"Assignee with Angular Component",field:"assignee",minWidth:100,filterable:!0,sortable:!0,filter:{model:new g,collection:this.assignees,params:{component:f}},queryFieldFilter:"assignee.id",queryFieldSorter:"assignee.name",formatter:()=>"...",asyncPostRender:this.renderAngularComponent.bind(this),params:{component:p,angularUtilService:this.angularUtilService,complexFieldLabel:"assignee.name"},exportCustomFormatter:l.l.complexObject},{id:"complete",name:"% Complete",field:"percentComplete",minWidth:100,filterable:!0,formatter:l.l.multiple,type:l.i.number,editor:{model:l.g.singleSelect,enableRenderHtml:!0,collection:Array.from(Array(101).keys()).map(e=>({value:e,label:e,symbol:'<i class="fa fa-percent" style="color:cadetblue"></i>'})),customStructure:{value:"value",label:"label",labelSuffix:"symbol"},elementOptions:{maxHeight:400}},filter:{model:l.k.slider,operator:">=",params:{hideSliderNumber:!1}},params:{formatters:[l.l.collectionEditor,l.l.percentCompleteBar]}},{id:"start",name:"Start",field:"start",minWidth:100,filterable:!0,filter:{model:l.k.compoundDate},formatter:l.l.dateIso,exportWithFormatter:!0,sortable:!0,type:l.i.date,editor:{model:l.g.date}},{id:"finish",name:"Finish",field:"finish",minWidth:100,filterable:!0,sortable:!0,filter:{model:l.k.compoundDate},formatter:l.l.dateIso,exportWithFormatter:!0,type:l.i.date,editor:{model:l.g.date}},{id:"action",name:"Action",field:"id",formatter:l.l.bsDropdown,params:{label:"Action"},onCellClick:(e,t)=>{this.bsDropdown.render({component:m,args:t,offsetLeft:65,offsetDropupBottom:15,parent:this})}}],this.gridOptions={asyncEditorLoading:!1,autoEdit:this.isAutoEdit,autoCommitEdit:!1,autoResize:{containerId:"demo-container",sidePadding:15},headerRowHeight:45,rowHeight:45,editable:!0,enableCellNavigation:!0,enableColumnPicker:!0,enableExcelCopyBuffer:!0,enableFiltering:!0,enableAsyncPostRender:!0,asyncPostRenderDelay:0,editCommandHandler:(e,t,i)=>{this._commandQueue.push(i),i.execute()},i18n:this.translate,params:{angularUtilService:this.angularUtilService}},this.dataset=this.mockData(100)}mockData(e,t=0){const i=[];for(let n=t;n<t+e;n++){const e=2e3+Math.floor(10*Math.random()),t=Math.floor(11*Math.random()),r=Math.floor(29*Math.random()),a=Math.round(100*Math.random());i.push({id:n,title:"Task "+n,assignee:n%3?this.assignees[3]:n%2?this.assignees[2]:this.assignees[1],duration:Math.round(100*Math.random())+"",percentComplete:a,percentCompleteNumber:a,start:new Date(e,t,r),finish:new Date(e,t+1,r),effortDriven:n%5==0})}return i}onCellChanged(e,t){this.updatedObject=t.item}onCellClicked(e,t){const i=this.angularGrid.gridService.getColumnFromEventArguments(t);console.log(i),"edit"===i.columnDef.id?(this.alertWarning=`open a modal window to edit: ${i.dataContext.title}`,this.angularGrid.gridService.highlightRow(t.row,1500)):"delete"===i.columnDef.id&&confirm("Are you sure?")&&this.angularGrid.gridService.deleteDataGridItemById(i.dataContext.id)}onCellValidation(e,t){alert(t.validationResults.msg)}changeAutoCommit(){return this.gridOptions.autoCommitEdit=!this.gridOptions.autoCommitEdit,this.gridObj.setOptions({autoCommitEdit:this.gridOptions.autoCommitEdit}),!0}setAutoEdit(e){return this.isAutoEdit=e,this.gridObj.setOptions({autoEdit:e}),!0}undo(){const e=this._commandQueue.pop();e&&Slick.GlobalEditorLock.cancelCurrentEdit()&&(e.undo(),this.gridObj.gotoCell(e.row,e.cell,!1))}renderAngularComponent(e,t,i,n){if(n.params.component){const t=this.angularUtilService.createAngularComponent(n.params.component);Object.assign(t.componentRef.instance,{item:i}),setTimeout(()=>$(e).empty().html(t.domElement))}}deleteCell(e){const t=this.angularGrid.dataView.getItem(e);this.angularGrid.gridService.deleteItemById(t.id)}};b.ctorParameters=()=>[{type:l.d},{type:l.e},{type:d.c}],b=a.b([Object(n.n)({template:i("Y5DI"),encapsulation:n.mb.None,styles:[i("8Jzt")]}),Object(n.B)(),a.c("design:paramtypes",[l.d,l.e,d.c])],b);let v=class{constructor(){this.title="Example 23: Grid AutoHeight",this.subTitle='\n  The SlickGrid option "autoHeight" can be used if you wish to keep the full height of the grid without any scrolling\n  <ul>\n  <li>You define a fixed grid width via "gridWidth" in the View</li>\n  <li>You can still use the "autoResize" for the width to be resized automatically (the height will never change in this case)</li>\n  <li>This dataset has 25 rows, if you scroll down the page you can see the entire set is shown without any grid scrolling (though you might have browser scrolling)</li>\n  </ul>\n  ',this.operatorList=["=","<","<=",">",">=","<>"],this.selectedOperator="=",this.searchValue=""}ngOnInit(){this.prepareGrid()}angularGridReady(e){this.angularGrid=e}prepareGrid(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",sortable:!0,type:l.i.string},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:l.i.number},{id:"complete",name:"% Complete",field:"percentComplete",formatter:l.l.percentCompleteBar,type:l.i.number},{id:"start",name:"Start",field:"start",formatter:l.l.dateIso,sortable:!0,type:l.i.date},{id:"finish",name:"Finish",field:"finish",formatter:l.l.dateIso,sortable:!0,type:l.i.date},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",formatter:l.l.checkmark,type:l.i.number}],this.selectedColumn=this.columnDefinitions[0],this.gridOptions={autoHeight:!0,autoResize:{containerId:"demo-container",sidePadding:15},enableFiltering:!0,showHeaderRow:!1,enableGridMenu:!1,alwaysShowVerticalScroll:!1,enableColumnPicker:!0,enableCellNavigation:!0,enableRowSelection:!0};const e=[];for(let t=0;t<25;t++){const i=2e3+Math.floor(10*Math.random()),n=Math.floor(11*Math.random()),r=Math.floor(29*Math.random()),a=Math.round(100*Math.random());e[t]={id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:a,percentCompleteNumber:a,start:new Date(i,n,r),finish:new Date(i,n+1,r),effortDriven:t%5==0}}this.dataset=e}updateFilter(){if(this.selectedColumn&&this.selectedOperator){const e=this.selectedColumn.field,t={},i={columnDef:this.selectedColumn,operator:this.selectedOperator,searchTerms:[this.searchValue||""]};this.searchValue&&(t[e]=i),this.angularGrid.dataView.setFilterArgs({columnFilters:t,grid:this.angularGrid.slickGrid}),this.angularGrid.dataView.refresh()}}};v=a.b([Object(n.n)({encapsulation:n.mb.None,template:i("To/D"),styles:[".duration-bg { background-color: #e9d4f1 !important }"]}),Object(n.B)(),a.c("design:paramtypes",[])],v);let y=class{constructor(){this.title="Example 1: Basic Grid",this.subTitle='\n    Basic Grid with fixed sizes (800 x 400) set by "gridHeight" &amp; "gridWidth"\n    <ul>\n      <li><a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/HOWTO---Step-by-Step" target="_blank">Wiki HOWTO link</a></li>\n    </ul>\n  '}ngOnInit(){this.columnDefinitions1=[{id:"title",name:"Title",field:"title",sortable:!0},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0},{id:"%",name:"% Complete",field:"percentComplete",sortable:!0},{id:"start",name:"Start",field:"start"},{id:"finish",name:"Finish",field:"finish"},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",sortable:!0}],this.gridOptions1={enableAutoResize:!1,enableSorting:!0},this.columnDefinitions2=this.columnDefinitions1,this.gridOptions2=this.gridOptions1,this.dataset1=this.mockData(),this.dataset2=this.mockData()}mockData(){const e=[];for(let t=0;t<1e3;t++){const i=2e3+Math.floor(10*Math.random()),n=Math.floor(11*Math.random()),r=Math.floor(29*Math.random()),a=Math.round(100*Math.random());e[t]={id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:a,start:`${n}/${r}/${i}`,finish:`${n}/${r}/${i}`,effortDriven:t%5==0}}return e}};y=a.b([Object(n.n)({template:i("3JFF")})],y);var C=i("IheW");class w{constructor(){this._clearFilterTriggered=!1,this.operator=l.q.equal}get columnFilter(){return this.columnDef&&this.columnDef.filter||{}}get gridOptions(){return this.grid&&this.grid.getOptions?this.grid.getOptions():{}}init(e){this.grid=e.grid,this.callback=e.callback,this.columnDef=e.columnDef,this.searchTerms=e.searchTerms||[];const t=Array.isArray(this.searchTerms)&&this.searchTerms[0]||"",i=this.buildTemplateHtmlString();this.$filterElm=this.createDomElement(i,t),this.$filterElm.keyup(e=>{let t=e&&e.target&&e.target.value||"";"string"==typeof t&&this.columnFilter.enableTrimWhiteSpace&&(t=t.trim()),this._clearFilterTriggered?(this.callback(e,{columnDef:this.columnDef,clearFilterTriggered:this._clearFilterTriggered}),this._clearFilterTriggered=!1,this.$filterElm.removeClass("filled")):(""===t?this.$filterElm.removeClass("filled"):this.$filterElm.addClass("filled"),this.callback(e,{columnDef:this.columnDef,searchTerms:[t]}))})}clear(){this.$filterElm&&(this._clearFilterTriggered=!0,this.$filterElm.val(""),this.$filterElm.trigger("keyup"))}destroy(){this.$filterElm&&this.$filterElm.off("keyup").remove()}setValues(e){e&&this.$filterElm.val(e)}buildTemplateHtmlString(){let e=this.gridOptions&&this.gridOptions.defaultFilterPlaceholder||"";return this.columnFilter&&this.columnFilter.placeholder&&(e=this.columnFilter.placeholder),`<input type="text" class="form-control search-filter" placeholder="${e}">`}createDomElement(e,t){const i=this.grid.getHeaderRowColumn(this.columnDef.id);$(i).empty();const n=$(e);return n.val(t),n.attr("id",`filter-${this.columnDef.id}`),n.data("columnId",this.columnDef.id),n&&"function"==typeof n.appendTo&&n.appendTo(i),n}}function k(e,t){return Math.floor(Math.random()*(t-e+1)+e)}let D=class{constructor(e,t){this.http=e,this.translate=t,this.title="Example 4: Client Side Sort/Filter",this.subTitle='\n    Sort/Filter on client side only using SlickGrid DataView (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Sorting" target="_blank">Wiki docs</a>)\n    <br/>\n    <ul class="small">\n      <li>Support multi-sort (by default), hold "Shift" key and click on the next column to sort.\n      <li>All column types support the following operators: (>, >=, <, <=, <>, !=, =, ==, *)\n      <ul>\n        <li>Example: >100 ... >=2001-01-01 ... >02/28/17</li>\n        <li><b>Note:</b> For filters to work properly (default is string), make sure to provide a FieldType (type is against the dataset, not the Formatter)</li>\n      </ul>\n      <li>Date Filters</li>\n      <ul>\n        <li>FieldType of dateUtc/date (from dataset) can use an extra option of "filterSearchType" to let user filter more easily. For example, in the "UTC Date" field below, you can type "&gt;02/28/2017", also when dealing with UTC you have to take the time difference in consideration.</li>\n      </ul>\n      <li>On String filters, (*) can be used as startsWith (Hello* => matches "Hello Word") ... endsWith (*Doe => matches: "John Doe")</li>\n      <li>Custom Filter are now possible, "Description" column below, is a customized InputFilter with different placeholder. See <a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Custom-Filter" target="_blank">Wiki - Custom Filter</a>\n      <li>MultipleSelect & SingeSelect Filters can use a regular "collection" or "collectionAsync" to load it asynchronously</li>\n    </ul>\n  '}ngOnInit(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",sortable:!0,minWidth:55,type:l.i.string,filterable:!0,filter:{model:l.k.compoundInput}},{id:"description",name:"Description",field:"description",filterable:!0,sortable:!0,minWidth:80,type:l.i.string,filter:{model:new w,enableTrimWhiteSpace:!0}},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:l.i.number,exportCsvForceToKeepAsString:!0,minWidth:55,filterable:!0,filter:{collectionAsync:this.http.get("assets/data/collection_500_numbers.json"),collectionFilterBy:{property:"value",operator:l.q.notEqual,value:365},collectionSortBy:{property:"value",sortDesc:!0,fieldType:l.i.number},customStructure:{value:"value",label:"label",labelSuffix:"text"},collectionOptions:{separatorBetweenTextLabels:" "},model:l.k.multipleSelect,filterOptions:{maxHeight:250,width:175}}},{id:"complete",name:"% Complete",field:"percentComplete",formatter:l.l.percentCompleteBar,minWidth:70,type:l.i.number,sortable:!0,filterable:!0,filter:{model:l.k.compoundInput}},{id:"start",name:"Start",field:"start",formatter:l.l.dateIso,sortable:!0,minWidth:75,exportWithFormatter:!0,type:l.i.date,filterable:!0,filter:{model:l.k.compoundDate}},{id:"usDateShort",name:"US Date Short",field:"usDateShort",exportWithFormatter:!0,sortable:!0,minWidth:70,width:70,type:l.i.dateUsShort,filterable:!0,filter:{model:l.k.compoundDate}},{id:"utcDate",name:"UTC Date",field:"utcDate",formatter:l.l.dateTimeIsoAmPm,sortable:!0,minWidth:115,type:l.i.dateUtc,exportWithFormatter:!0,outputType:l.i.dateTimeIsoAmPm,filterable:!0,filter:{model:l.k.compoundDate,filterOptions:{minDate:"today"}}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven.isEffort",minWidth:85,maxWidth:85,type:l.i.boolean,sortable:!0,formatter:l.l.multiple,params:{formatters:[l.l.complexObject,l.l.checkmark]},filterable:!0,filter:{collection:[{isEffort:"",label:""},{isEffort:!0,label:"True"},{isEffort:!1,label:"False"}],customStructure:{value:"isEffort",label:"label"},model:l.k.singleSelect,filterOptions:{autoDropWidth:!0}}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableExcelCopyBuffer:!0,enableFiltering:!0,i18n:this.translate,presets:{filters:[{columnId:"duration",searchTerms:[2,22,44]},{columnId:"usDateShort",operator:"<",searchTerms:["4/20/25"]}],sorters:[{columnId:"duration",direction:"DESC"},{columnId:"complete",direction:"ASC"}]}},this.dataset=this.mockData(500)}angularGridReady(e){this.angularGrid=e}mockData(e,t=0){const i=[];for(let n=t;n<t+e;n++){const e=Math.round(100*Math.random()),t=k(2e3,2025),r=k(10,25),a=k(1,12),o=a<10?`0${a}`:a,l=k(10,28),s=k(0,100),d=k(10,23),c=k(10,59),u=n%3==0;i.push({id:n,title:"Task "+n,description:n%5?"desc "+n:null,duration:e,percentComplete:s,percentCompleteNumber:s,start:n%4?null:new Date(t,a,l),usDateShort:`${a}/${l}/${r}`,utcDate:`${t}-${o}-${l}T${d}:${c}:${c}Z`,effortDriven:{isEffort:u,label:u?"Effort":"NoEffort"}})}return i}gridStateChanged(e){console.log("Client sample, Grid State changed:: ",e)}saveCurrentGridState(e){console.log("Client sample, last Grid State:: ",this.angularGrid.gridStateService.getCurrentGridState())}refreshMetrics(e,t){t&&t.current>0&&setTimeout(()=>{this.metrics={startTime:new Date,itemCount:t&&t.current,totalItemCount:this.dataset.length}})}};D.ctorParameters=()=>[{type:C.a},{type:d.c}],D=a.b([Object(n.n)({template:i("3jFL")}),a.c("design:paramtypes",[C.a,d.c])],D);let S=class{constructor(){this.title="Example 15: Column Span & Header Grouping",this.subTitle='\n  This example demonstrates how to easily span a row over multiple columns & how to group header titles.\n  <ul>\n    <li>\n      Row Colspan - (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Colspan" target="_blank">Wiki docs</a>) /\n      Header Grouping - (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Title-Grouping" target="_blank">Wiki docs</a>)\n    </li>\n    <li>Note that you can add Sort but remember that it will sort by the data that the row contains, even if the data is visually hidden by colspan it will still sort it</li>\n    <li>\n      Header Grouping spanning accross multiple columns is working but has some UI issues on window resize.\n      If anyone can fix it, probably some CSS issues, please let us know.\n    </li>\n  </ul>\n  ',this.dataset1=[],this.dataset2=[]}ngOnInit(){this.prepareGrid1(),this.prepareGrid2()}prepareGrid1(){this.columnDefinitions1=[{id:"title",name:"Title",field:"title",sortable:!0,columnGroup:"Common Factor"},{id:"duration",name:"Duration",field:"duration",columnGroup:"Common Factor"},{id:"start",name:"Start",field:"start",columnGroup:"Period"},{id:"finish",name:"Finish",field:"finish",columnGroup:"Period"},{id:"%",name:"% Complete",field:"percentComplete",selectable:!1,columnGroup:"Analysis"},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",type:l.i.boolean,columnGroup:"Analysis"}],this.gridOptions1={enableAutoResize:!1,enableCellNavigation:!0,enableColumnReorder:!1,enableSorting:!0,createPreHeaderPanel:!0,showPreHeaderPanel:!0,preHeaderPanelHeight:25,explicitInitialization:!0,colspanCallback:this.renderDifferentColspan},this.dataset1=this.getData(500)}prepareGrid2(){this.columnDefinitions2=[{id:"title",name:"Title",field:"title",sortable:!0,columnGroup:"Common Factor"},{id:"duration",name:"Duration",field:"duration",columnGroup:"Common Factor"},{id:"start",name:"Start",field:"start",columnGroup:"Period"},{id:"finish",name:"Finish",field:"finish",columnGroup:"Period"},{id:"%",name:"% Complete",field:"percentComplete",selectable:!1,columnGroup:"Analysis"},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",type:l.i.boolean,columnGroup:"Analysis"}],this.gridOptions2={alwaysShowVerticalScroll:!1,enableCellNavigation:!0,enableColumnReorder:!1,createPreHeaderPanel:!0,showPreHeaderPanel:!0,preHeaderPanelHeight:25,explicitInitialization:!0,frozenColumn:1},this.dataset2=this.getData(500)}getData(e){const t=[];for(let i=0;i<e;i++)t[i]={id:i,num:i,title:"Task "+i,duration:"5 days",percentComplete:Math.round(100*Math.random()),start:"01/01/2009",finish:"01/05/2009",effortDriven:i%5==0};return t}renderDifferentColspan(e){return e.id%2==1?{columns:{duration:{colspan:3}}}:{columns:{0:{colspan:"*"}}}}};S=a.b([Object(n.n)({template:i("8hOR"),styles:[i("wSoe")]})],S);let O=class{constructor(){this.title="Example 19: Draggable Grouping & Aggregators",this.subTitle='\n      <ul>\n        <li><a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grouping-&-Aggregators" target="_blank">Wiki docs</a></li>\n        <li>This example shows 3 ways of grouping</li>\n        <ol>\n          <li>Drag any Column Header on the top placeholder to group by that column (support moti-columns grouping by adding more columns to the drop area).</li>\n          <li>Use buttons and defined functions to group by wichever field you want</li>\n          <li>Use the Select dropdown to group, the position of the Selects represent the grouping level</li>\n        </ol>\n        <li>Fully dynamic and interactive multi-level grouping with filtering and aggregates ovor 50\'000 items</li>\n        <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\n        <li>Use "Aggregators" and "GroupTotalFormatters" directly from Angular-Slickgrid</li>\n      </ul>\n    ',this.durationOrderByCount=!1,this.processing=!1,this.selectedGroupingFields=["","",""],this.loadData(500),this.defineGrid()}ngOnInit(){this.defineGrid()}angularGridReady(e){this.angularGrid=e,this.gridObj=e.slickGrid,this.dataviewObj=e.dataView}defineGrid(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",width:70,minWidth:50,cssClass:"cell-title",filterable:!0,sortable:!0,grouping:{getter:"title",formatter:e=>`Title: ${e.value}  <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"duration",name:"Duration",field:"duration",width:70,sortable:!0,filterable:!0,filter:{model:l.k.slider,operator:">="},type:l.i.number,groupTotalsFormatter:l.o.sumTotals,grouping:{getter:"duration",formatter:e=>`Duration: ${e.value}  <span style="color:green">(${e.count} items)</span>`,comparer:(e,t)=>this.durationOrderByCount?e.count-t.count:l.t.numeric(e.value,t.value,l.s.asc),aggregators:[new l.a.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"percentComplete",name:"% Complete",field:"percentComplete",minWidth:70,width:90,formatter:l.l.percentCompleteBar,type:l.i.number,filterable:!0,filter:{model:l.k.compoundSlider},sortable:!0,groupTotalsFormatter:l.o.avgTotalsPercentage,grouping:{getter:"percentComplete",formatter:e=>`% Complete:  ${e.value}  <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("cost")],aggregateCollapsed:!1,collapsed:!1},params:{groupFormatterPrefix:"<i>Avg</i>: "}},{id:"start",name:"Start",field:"start",minWidth:60,sortable:!0,filterable:!0,filter:{model:l.k.compoundDate},formatter:l.l.dateIso,type:l.i.dateUtc,outputType:l.i.dateIso,exportWithFormatter:!0,grouping:{getter:"start",formatter:e=>`Start: ${e.value}  <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"finish",name:"Finish",field:"finish",minWidth:60,sortable:!0,filterable:!0,filter:{model:l.k.compoundDate},formatter:l.l.dateIso,type:l.i.dateUtc,outputType:l.i.dateIso,exportWithFormatter:!0,grouping:{getter:"finish",formatter:e=>`Finish: ${e.value} <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"cost",name:"Cost",field:"cost",width:90,sortable:!0,filterable:!0,filter:{model:l.k.compoundInput},formatter:l.l.dollar,groupTotalsFormatter:l.o.sumTotalsDollar,type:l.i.number,grouping:{getter:"cost",formatter:e=>`Cost: ${e.value} <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("cost")],aggregateCollapsed:!0,collapsed:!0}},{id:"effortDriven",name:"Effort Driven",field:"effortDriven",width:80,minWidth:20,maxWidth:100,cssClass:"cell-effort-driven",sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:l.k.singleSelect},formatter:l.l.checkmark,grouping:{getter:"effortDriven",formatter:e=>`Effort-Driven: ${e.value?"True":"False"} <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("cost")],collapsed:!1}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableDraggableGrouping:!0,createPreHeaderPanel:!0,showPreHeaderPanel:!0,preHeaderPanelHeight:40,enableFiltering:!0,enableSorting:!0,enableColumnReorder:!0,exportOptions:{sanitizeDataExport:!0},gridMenu:{onCommand:(e,t)=>{"toggle-preheader"===t.command&&this.clearGrouping()}},draggableGrouping:{dropPlaceHolderText:"Drop a column header here to group by the column",deleteIconCssClass:"fa fa-times",onGroupChanged:(e,t)=>this.onGroupChanged(t),onExtensionRegistered:e=>this.draggableGroupingPlugin=e}},this.loadData(500)}loadData(e){this.dataset=[];for(let t=0;t<e;t++){const e=2e3+Math.floor(10*Math.random()),i=Math.floor(11*Math.random()),n=Math.floor(29*Math.random()),r=Math.round(100*Math.random());this.dataset[t]={id:"id_"+t,num:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:r,percentCompleteNumber:r,start:new Date(e,i,n),finish:new Date(e,i+1,n),cost:t%33==0?null:Math.round(1e4*Math.random())/100,effortDriven:t%5==0}}}clearGroupsAndSelects(){this.clearGroupingSelects(),this.clearGrouping()}clearGrouping(){this.draggableGroupingPlugin&&this.draggableGroupingPlugin.setDroppedGroups&&this.draggableGroupingPlugin.clearDroppedGroups()}clearGroupingSelects(){this.selectedGroupingFields.forEach((e,t)=>this.selectedGroupingFields[t]="")}collapseAllGroups(){this.dataviewObj.collapseAllGroups()}expandAllGroups(){this.dataviewObj.expandAllGroups()}exportToExcel(){this.angularGrid.excelExportService.exportToExcel({filename:"Export",format:l.j.xlsx})}exportToCsv(e="csv"){this.angularGrid.exportService.exportToFile({delimiter:"csv"===e?l.f.comma:l.f.tab,filename:"myExport",format:"csv"===e?l.j.csv:l.j.txt})}groupByDuration(){this.clearGrouping(),this.draggableGroupingPlugin&&this.draggableGroupingPlugin.setDroppedGroups&&(this.showPreHeader(),this.draggableGroupingPlugin.setDroppedGroups("duration"),this.gridObj.invalidate(),this.gridObj.render())}groupByDurationOrderByCount(e=!1){this.durationOrderByCount=e,this.clearGrouping(),this.groupByDuration()}groupByDurationEffortDriven(){this.clearGrouping(),this.draggableGroupingPlugin&&this.draggableGroupingPlugin.setDroppedGroups&&(this.showPreHeader(),this.draggableGroupingPlugin.setDroppedGroups(["duration","effortDriven"]),this.gridObj.invalidate(),this.gridObj.render())}groupByFieldName(e,t){if(this.clearGrouping(),this.draggableGroupingPlugin&&this.draggableGroupingPlugin.setDroppedGroups){const e=this.selectedGroupingFields.filter(e=>""!==e);this.showPreHeader(),this.draggableGroupingPlugin.setDroppedGroups(e),this.gridObj.invalidate(),this.gridObj.render()}}onGroupChanged(e){const t=e&&e.caller||[],i=e&&e.groupColumns||[];Array.isArray(this.selectedGroupingFields)&&Array.isArray(i)&&i.length>0?this.selectedGroupingFields.forEach((e,t)=>this.selectedGroupingFields[t]=i[t]&&i[t].getter||""):0===i.length&&"remove-group"===t&&this.clearGroupingSelects()}showPreHeader(){this.gridObj.setPreHeaderPanelVisibility(!0)}selectTrackByFn(e,t){return e}toggleDraggableGroupingRow(){this.clearGrouping(),this.gridObj.setPreHeaderPanelVisibility(!this.gridObj.getOptions().showPreHeaderPanel)}};O=a.b([Object(n.B)(),Object(n.n)({template:i("LUAn")}),a.c("design:paramtypes",[])],O);class G{constructor(e){this.args=e,this.init()}get columnDef(){return this.args&&this.args.column||{}}get columnEditor(){return this.columnDef&&this.columnDef.internalColumnEditor||{}}get hasAutoCommitEdit(){return this.args.grid.getOptions().autoCommitEdit}get validator(){return this.columnEditor.validator||this.columnDef.validator}init(){const e=this.columnEditor&&this.columnEditor.placeholder||"",t=this.columnEditor&&this.columnEditor.title||"";this.$input=$(`<input type="text" class="editor-text" placeholder="${e}" title="${t}" />`).appendTo(this.args.container).on("keydown.nav",e=>{this._lastInputEvent=e,e.keyCode!==l.p.LEFT&&e.keyCode!==l.p.RIGHT||e.stopImmediatePropagation()}),this.hasAutoCommitEdit&&this.$input.on("focusout",()=>this.save()),setTimeout(()=>{this.$input.focus().select()},50)}destroy(){this.$input.off("keydown.nav").remove()}focus(){this.$input.focus()}getValue(){return this.$input.val()}setValue(e){this.$input.val(e)}loadValue(e){this.defaultValue=e[this.args.column.field]||"",this.$input.val(this.defaultValue),this.$input[0].defaultValue=this.defaultValue,this.$input.select()}serializeValue(){return this.$input.val()}applyValue(e,t){const i=this.validate(t);e[this.args.column.field]=i&&i.valid?t:""}isValueChanged(){const e=this._lastInputEvent&&this._lastInputEvent.keyCode;return!(!this.columnEditor||!this.columnEditor.alwaysSaveOnEnterKey||e!==l.p.ENTER)||!(""===this.$input.val()&&null===this.defaultValue)&&this.$input.val()!==this.defaultValue}save(){const e=this.validate();e&&e.valid&&(this.hasAutoCommitEdit?this.args.grid.getEditorLock().commitCurrentEdit():this.args.commitChanges())}validate(e){if(this.validator){const t=void 0!==e?e:this.$input&&this.$input.val&&this.$input.val();return this.validator(t,this.args)}return{valid:!0,msg:null}}}G.ctorParameters=()=>[{type:void 0}];const T=(e,t)=>{const i=t&&t.grid;(i&&i.getOptions?i.getOptions():{}).i18n,t&&t.column&&t.column.internalColumnEditor;return null!=e&&void 0!==e&&e.length?/^Task\s\d+$/.test(e)?{valid:!0,msg:""}:{valid:!1,msg:'Your title is invalid, it must start with "Task" followed by a number'}:{valid:!1,msg:"This is a required field"}},x=(e,t,i,n,r)=>{if(i&&Array.isArray(i)){const e=i.map(e=>`Task ${e}`).join(", ");return`<span title="${e}">${e}</span>`}return""};let R=class{constructor(e,t){this.http=e,this.translate=t,this.title="Example 3: Editors",this.subTitle='\n  Grid with Inline Editors and onCellClick actions (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Editors" target="_blank">Wiki docs</a>).\n  <ul>\n    <li>Multiple Editors & Filters are available: AutoComplete, Checkbox, Date, Slider, SingleSelect, MultipleSelect, Float, Text, LongText... even Custom Editor</li>\n    <li>When using "enableCellNavigation: true", clicking on a cell will automatically make it active &amp; selected.</li>\n    <ul><li>If you don\'t want this behavior, then you should disable "enableCellNavigation"</li></ul>\n    <li>Inline Editors requires "enableCellNavigation: true" (not sure why though)</li>\n    <li>\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling "enableExcelCopyBuffer" flag.\n        Note that it will only evaluate Formatter when the "exportWithFormatter" flag is enabled (through "ExportOptions" or the column definition)\n    </li>\n    <li>MultipleSelect & SingeSelect Editors & Filters can use a regular "collection" or "collectionAsync" to load it asynchronously</li>\n    <ul>\n      <li>Click on "Add Item" and see the Editor/Filter or the "Prerequesites" column change</li>\n      <li>Any Editor/Filter with a "collection" can be changed dynamically later in the future</li>\n    </ul>\n  </ul>\n  ',this._commandQueue=[],this.isAutoEdit=!0,this.selectedLanguage="en",this.duplicateTitleHeaderCount=1}ngOnInit(){this.prepareGrid()}angularGridReady(e){this.angularGrid=e,this.gridObj=e.slickGrid}prepareGrid(){this.columnDefinitions=[{id:"edit",field:"id",excludeFromColumnPicker:!0,excludeFromGridMenu:!0,excludeFromHeaderMenu:!0,formatter:l.l.editIcon,minWidth:30,maxWidth:30,onCellClick:(e,t)=>{console.log(t),this.alertWarning=`Editing: ${t.dataContext.title}`,this.angularGrid.gridService.highlightRow(t.row,1500),this.angularGrid.gridService.setSelectedRow(t.row)}},{id:"delete",field:"id",excludeFromColumnPicker:!0,excludeFromGridMenu:!0,excludeFromHeaderMenu:!0,formatter:l.l.deleteIcon,minWidth:30,maxWidth:30},{id:"title",name:"Title",field:"title",minWidth:100,filterable:!0,sortable:!0,type:l.i.string,editor:{model:l.g.longText,required:!0,validator:T},onCellChange:(e,t)=>{console.log(t),this.alertWarning=`Updated Title: ${t.dataContext.title}`}},{id:"title2",name:"Title, Custom Editor",field:"title",minWidth:70,filterable:!0,sortable:!0,type:l.i.string,editor:{model:G,placeholder:"custom",validator:T},filter:{model:w,placeholder:"&#128269; custom"}},{id:"duration",name:"Duration (days)",field:"duration",minWidth:100,filterable:!0,sortable:!0,type:l.i.number,filter:{model:l.k.slider,params:{hideSliderNumber:!1}},editor:{model:l.g.slider,minValue:0,maxValue:100}},{id:"complete",name:"% Complete",field:"percentComplete",minWidth:100,filterable:!0,formatter:l.l.multiple,type:l.i.number,editor:{model:l.g.singleSelect,enableRenderHtml:!0,collection:Array.from(Array(101).keys()).map(e=>({value:e,label:e,symbol:'<i class="fa fa-percent" style="color:cadetblue"></i>'})),customStructure:{value:"value",label:"label",labelSuffix:"symbol"},collectionSortBy:{property:"label",sortDesc:!0},collectionFilterBy:{property:"value",value:0,operator:l.q.notEqual},elementOptions:{maxHeight:400}},params:{formatters:[l.l.collectionEditor,l.l.percentCompleteBar]}},{id:"start",name:"Start",field:"start",minWidth:100,filterable:!0,filter:{model:l.k.compoundDate},formatter:l.l.dateIso,exportWithFormatter:!0,sortable:!0,type:l.i.date,editor:{model:l.g.date}},{id:"finish",name:"Finish",field:"finish",minWidth:100,filterable:!0,sortable:!0,filter:{model:l.k.compoundDate},formatter:l.l.dateIso,exportWithFormatter:!0,type:l.i.date,editor:{model:l.g.date,editorOptions:{minDate:"today"}}},{id:"cityOfOrigin",name:"City of Origin",field:"cityOfOrigin",filterable:!0,minWidth:100,editor:{model:l.g.autoComplete,placeholder:"&#128269; search city",editorOptions:{forceUserInput:!0,minLength:3,source:(e,t)=>{$.ajax({url:"http://gd.geobytes.com/AutoCompleteCity",dataType:"jsonp",data:{q:e.term},success:e=>t(e)})}}},filter:{model:l.k.autoComplete,filterOptions:{minLength:3,source:(e,t)=>{$.ajax({url:"http://gd.geobytes.com/AutoCompleteCity",dataType:"jsonp",data:{q:e.term},success:e=>t(e)})}}}},{id:"countryOfOrigin",name:"Country of Origin",field:"countryOfOrigin",formatter:l.l.complexObject,exportWithFormatter:!0,dataKey:"code",labelKey:"name",type:l.i.object,sorter:l.t.objectString,filterable:!0,sortable:!0,minWidth:100,editor:{model:l.g.autoComplete,customStructure:{label:"name",value:"code"},collectionAsync:this.http.get("assets/data/countries.json")},filter:{model:l.k.autoComplete,customStructure:{label:"name",value:"code"},collectionAsync:this.http.get("assets/data/countries.json")}},{id:"countryOfOriginName",name:"Country of Origin Name",field:"countryOfOriginName",filterable:!0,sortable:!0,minWidth:100,editor:{model:l.g.autoComplete,collectionAsync:this.http.get("assets/data/country_names.json")},filter:{model:l.k.autoComplete,collectionAsync:this.http.get("assets/data/country_names.json")}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",minWidth:70,filterable:!0,type:l.i.boolean,filter:{model:l.k.singleSelect,collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}]},formatter:l.l.checkmark,editor:{model:l.g.checkbox}},{id:"prerequisites",name:"Prerequisites",field:"prerequisites",minWidth:100,filterable:!0,formatter:x,sortable:!0,type:l.i.string,editor:{collectionAsync:this.http.get("assets/data/collection_100_numbers.json"),collectionSortBy:{property:"label",sortDesc:!0},customStructure:{label:"label",value:"value",labelPrefix:"prefix"},collectionOptions:{separatorBetweenTextLabels:" "},model:l.g.multipleSelect,required:!0},filter:{collectionAsync:this.http.get("assets/data/collection_100_numbers.json"),collectionSortBy:{property:"label",sortDesc:!0},customStructure:{label:"label",value:"value",labelPrefix:"prefix"},collectionOptions:{separatorBetweenTextLabels:" "},model:l.k.multipleSelect,operator:l.q.inContains}}],this.gridOptions={asyncEditorLoading:!1,autoEdit:this.isAutoEdit,autoCommitEdit:!1,autoResize:{containerId:"demo-container",sidePadding:15},editable:!0,enableCellNavigation:!0,enableColumnPicker:!0,enableExcelCopyBuffer:!0,enableFiltering:!0,editCommandHandler:(e,t,i)=>{this._commandQueue.push(i),i.execute()},i18n:this.translate},this.dataset=this.mockData(100)}addItem(){const e=this.dataset.length,t=this.mockData(1,e);setTimeout(()=>{const i=this.columnDefinitions.find(e=>"prerequisites"===e.id);if(i){const n=i.filter.collectionAsync,r=i.editor.collection;Array.isArray(r)&&(this.angularGrid.gridService.addItem(t[0]),r.push({value:e,label:e,prefix:"Task"}),n instanceof c.a&&n.next(r))}},250)}deleteItem(){const e=this.columnDefinitions.find(e=>"prerequisites"===e.id);if(e){const t=e.filter.collectionAsync,i=e.filter.collection;if(Array.isArray(i)){const e=this.sortCollectionDescending(i).pop();this.angularGrid.gridService.deleteDataGridItemById(e.value),t instanceof c.a&&t.next(i)}}}sortCollectionDescending(e){return e.sort((e,t)=>e.value-t.value)}mockData(e,t=0){const i=[];for(let n=t;n<t+e;n++){const e=2e3+Math.floor(10*Math.random()),t=(new Date).getFullYear()-3+Math.floor(10*Math.random()),r=Math.floor(11*Math.random()),a=Math.floor(29*Math.random()),o=Math.round(100*Math.random()),l=new Date(t,r+1,a);i.push({id:n,title:"Task "+n,duration:n%33==0?null:Math.round(100*Math.random())+"",percentComplete:o,percentCompleteNumber:o,start:new Date(e,r,a),finish:l<new Date?"":l,effortDriven:n%5==0,prerequisites:n%2==0&&0!==n&&n<12?[n,n-1]:[],countryOfOrigin:n%2?{code:"CA",name:"Canada"}:{code:"US",name:"United States"},countryOfOriginName:n%2?"Canada":"United States",cityOfOrigin:n%2?"Vancouver, BC, Canada":"Boston, MA, United States"})}return i}onCellChanged(e,t){this.updatedObject=t.item}onCellClicked(e,t){const i=this.angularGrid.gridService.getColumnFromEventArguments(t);console.log(i),"edit"===i.columnDef.id?(this.alertWarning=`open a modal window to edit: ${i.dataContext.title}`,this.angularGrid.gridService.highlightRow(t.row,1500)):"delete"===i.columnDef.id&&confirm("Are you sure?")&&this.angularGrid.gridService.deleteDataGridItemById(i.dataContext.id)}onCellValidation(e,t){alert(t.validationResults.msg)}changeAutoCommit(){return this.gridOptions.autoCommitEdit=!this.gridOptions.autoCommitEdit,this.gridObj.setOptions({autoCommitEdit:this.gridOptions.autoCommitEdit}),!0}dynamicallyAddTitleHeader(){const e={id:`title${this.duplicateTitleHeaderCount++}`,name:"Title",field:"title",editor:{model:l.g.text,required:!0,validator:T},sortable:!0,minWidth:100,filterable:!0,params:{useFormatterOuputToFilter:!0}};this.columnDefinitions.push(e),this.columnDefinitions=this.columnDefinitions.slice()}setAutoEdit(e){return this.isAutoEdit=e,this.gridObj.setOptions({autoEdit:e}),!0}undo(){const e=this._commandQueue.pop();e&&Slick.GlobalEditorLock.cancelCurrentEdit()&&(e.undo(),this.gridObj.gotoCell(e.row,e.cell,!1))}};R.ctorParameters=()=>[{type:C.a},{type:d.c}],R=a.b([Object(n.n)({template:i("pI45")}),Object(n.B)(),a.c("design:paramtypes",[C.a,d.c])],R);const E=(e,t,i,n,r)=>i?'<i class="fa fa-fire red" aria-hidden="true"></i>':{text:'<i class="fa fa-snowflake-o" aria-hidden="true"></i>',addClasses:"lightblue",toolTip:"Freezing"},A=(e,t,i,n,r,a)=>`<span style="margin-left: 5px">\n      <button class="btn btn-xs btn-default">\n        <i class="fa ${i?"fa-check-circle":"fa-circle-thin"} fa-lg" style="color: ${i?"black":"lavender"}"></i>\n      </button>\n    </span>`;let F=class{constructor(){this.title="Example 2: Grid with Formatters",this.subTitle='\n    Grid with Custom and/or included Slickgrid Formatters (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Formatters" target="_blank">Wiki docs</a>).\n    <ul>\n      <li>The 2 last columns are using Custom Formatters</li>\n      <ul><li>The "Completed" column uses a the "onCellClick" event and a formatter to simulate a toggle action</li></ul>\n      <li>\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling "enableExcelCopyBuffer" flag.\n        Note that it will only evaluate Formatter when the "exportWithFormatter" flag is enabled (through "ExportOptions" or the column definition)\n      </li>\n      <li>This example also has auto-resize enabled, and we also demo how you can pause the resizer if you wish to</li>\n    </ul>\n  ',this.resizerPaused=!1}angularGridReady(e){this.angularGrid=e}ngOnInit(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",sortable:!0,type:l.i.string,width:70},{id:"phone",name:"Phone Number using mask",field:"phone",sortable:!0,type:l.i.number,minWidth:100,formatter:l.l.mask,params:{mask:"(000) 000-0000"}},{id:"duration",name:"Duration (days)",field:"duration",formatter:l.l.decimal,params:{minDecimalPlaces:1,maxDecimalPlaces:2},sortable:!0,type:l.i.number,minWidth:90,exportWithFormatter:!0},{id:"complete",name:"% Complete",field:"percentComplete",formatter:l.l.percentCompleteBar,type:l.i.number,sortable:!0,minWidth:100},{id:"percent2",name:"% Complete",field:"percentComplete2",formatter:l.l.progressBar,type:l.i.number,sortable:!0,minWidth:100},{id:"start",name:"Start",field:"start",formatter:l.l.dateIso,sortable:!0,type:l.i.date,minWidth:90,exportWithFormatter:!0},{id:"finish",name:"Finish",field:"finish",formatter:l.l.dateIso,sortable:!0,type:l.i.date,minWidth:90,exportWithFormatter:!0},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",formatter:E,type:l.i.number,sortable:!0,minWidth:100},{id:"completed",name:"Completed",field:"completed",type:l.i.number,sortable:!0,minWidth:100,formatter:A,onCellClick:(e,t)=>{this.toggleCompletedProperty(t&&t.dataContext)}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableAutoResize:!0,enableCellNavigation:!0,enableExcelCopyBuffer:!0,excelCopyBufferOptions:{onCopyCells:(e,t)=>console.log("onCopyCells",t.ranges),onPasteCells:(e,t)=>console.log("onPasteCells",t.ranges),onCopyCancelled:(e,t)=>console.log("onCopyCancelled",t.ranges)}},this.dataset=[];for(let e=0;e<500;e++){const t=2e3+Math.floor(10*Math.random()),i=Math.floor(11*Math.random()),n=Math.floor(29*Math.random()),r=Math.round(100*Math.random());this.dataset[e]={id:e,title:"Task "+e,phone:this.generatePhoneNumber(),duration:e%33==0?null:100*Math.random()+"",percentComplete:r,percentComplete2:r,percentCompleteNumber:r,start:new Date(t,i,n),finish:new Date(t,i+1,n),effortDriven:e%5==0}}}generatePhoneNumber(){let e="";for(let t=0;t<10;t++)e+=Math.round(9*Math.random())+"";return e}togglePauseResizer(){this.resizerPaused=!this.resizerPaused,this.angularGrid.resizerService.pauseResizer(this.resizerPaused)}toggleCompletedProperty(e){"object"==typeof e&&(e.completed=!e.completed,setTimeout(()=>{this.angularGrid.gridService.updateItemById(e.id,e,{highlightRow:!1})},250))}};F=a.b([Object(n.n)({template:i("IGMT")})],F);let M=class{constructor(){this.title="Example 20: Pinned (frozen) Columns/Rows",this.subTitle='\n    This example demonstrates the use of Pinned (aka frozen) Columns and/or Rows<br/>\n    <ul>\n      <li>Option to pin any number of columns (left only) or rows</li>\n      <li>Option to pin the rows at the bottom instead of the top (default)</li>\n      <li>You can also dynamically any of these options, through SlickGrid "setOptions()"</li>\n      <li>Possibility to change the styling of the line border between pinned columns/rows</li>\n    </ul>\n  ',this.frozenColumnCount=2,this.frozenRowCount=3,this.isFrozenBottom=!1}ngOnInit(){this.prepareDataGrid()}angularGridReady(e){this.angularGrid=e,this.gridObj=e.slickGrid}prepareDataGrid(){this.columnDefinitions=[{id:"sel",name:"#",field:"id",minWidth:40,width:40,maxWidth:40,cannotTriggerInsert:!0,resizable:!1,unselectable:!0},{id:"title",name:"Title",field:"title",minWidth:100,width:120,filterable:!0,sortable:!0},{id:"duration",name:"Duration",field:"duration",minWidth:100,width:120,filterable:!0,sortable:!0},{id:"percentComplete",name:"% Complete",field:"percentComplete",resizable:!1,minWidth:130,width:140,formatter:l.l.percentCompleteBar,type:l.i.number,filterable:!0,filter:{model:l.k.slider,operator:">="},sortable:!0},{id:"start",name:"Start",field:"start",minWidth:100,width:120,filterable:!0,sortable:!0},{id:"finish",name:"Finish",field:"finish",minWidth:100,width:120,filterable:!0,sortable:!0},{id:"effortDriven",name:"Effort Driven",field:"effortDriven",minWidth:100,width:120,formatter:l.l.checkmark,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:l.k.singleSelect},sortable:!0},{id:"title1",name:"Title1",field:"title1",minWidth:100,width:120,filterable:!0,sortable:!0},{id:"title2",name:"Title2",field:"title2",minWidth:100,width:120,filterable:!0,sortable:!0},{id:"title3",name:"Title3",field:"title3",minWidth:100,width:120,filterable:!0,sortable:!0},{id:"title4",name:"Title4",field:"title4",minWidth:100,width:120,filterable:!0,sortable:!0}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},alwaysShowVerticalScroll:!1,enableExcelCopyBuffer:!0,enableCellNavigation:!0,frozenColumn:this.frozenColumnCount,frozenRow:this.frozenRowCount},this.dataset=this.getData()}getData(){const e=[];for(let t=0;t<500;t++)e[t]={id:t,title:"Task "+t,duration:Math.round(25*Math.random())+" days",percentComplete:Math.round(100*Math.random()),start:"01/01/2009",finish:"01/05/2009",effortDriven:t%5==0,title1:Math.round(25*Math.random()),title2:Math.round(25*Math.random()),title3:Math.round(25*Math.random()),title4:Math.round(25*Math.random())};return e}changeFrozenColumnCount(){this.gridObj&&this.gridObj.setOptions&&this.gridObj.setOptions({frozenColumn:this.frozenColumnCount})}changeFrozenRowCount(){this.gridObj&&this.gridObj.setOptions&&this.gridObj.setOptions({frozenRow:this.frozenRowCount})}toggleFrozenBottomRows(){this.gridObj&&this.gridObj.setOptions&&(this.gridObj.setOptions({frozenBottom:!this.isFrozenBottom}),this.isFrozenBottom=!this.isFrozenBottom)}};M=a.b([Object(n.n)({template:i("3RMc"),encapsulation:n.mb.None,styles:[i("sx++")]})],M);var I=i("sjEL");let P=class{constructor(e){this.translate=e,this.title="Example 6: Grid connected to Backend Server with GraphQL",this.subTitle='\n    Sorting/Paging connected to a Backend GraphQL Service (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/GraphQL" target="_blank">Wiki docs</a>).\n    <br/>\n    <ul class="small">\n      <li><span class="red">(*) NO DATA SHOWING</span> - just change Filters &amp; Pages and look at the "GraphQL Query" changing :)</li>\n      <li>This example also demos the Grid State feature, open the console log to see the changes</li>\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)\n      <ul>\n        <li>The (*) can be used as startsWith (ex.: "abc*" => startsWith "abc") / endsWith (ex.: "*xyz" => endsWith "xyz")</li>\n        <li>The other operators can be used on column type number for example: ">=100" (bigger or equal than 100)</li>\n      </ul>\n      <li>You can also preload a grid with certain "presets" like Filters / Sorters / Pagination <a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-State-&-Preset" target="_blank">Wiki - Grid Preset</a>\n    </ul>\n  ',this.dataset=[],this.graphqlQuery="",this.processing=!0,this.status={text:"processing...",class:"alert alert-danger"},this.isWithCursor=!1,this.selectedLanguage=this.translate.getDefaultLang()}ngOnDestroy(){this.gridStateSub.unsubscribe()}ngOnInit(){this.columnDefinitions=[{id:"name",field:"name",headerKey:"NAME",filterable:!0,sortable:!0,type:l.i.string,width:60},{id:"gender",field:"gender",headerKey:"GENDER",filterable:!0,sortable:!0,width:60,filter:{model:l.k.singleSelect,collection:[{value:"",label:""},{value:"male",label:"male",labelKey:"MALE"},{value:"female",label:"female",labelKey:"FEMALE"}]}},{id:"company",field:"company",headerKey:"COMPANY",width:60,sortable:!0,filterable:!0,filter:{model:l.k.multipleSelect,collection:[{value:"acme",label:"Acme"},{value:"abc",label:"Company ABC"},{value:"xyz",label:"Company XYZ"}],filterOptions:{filter:!0}}},{id:"billing.address.street",field:"billing.address.street",headerKey:"BILLING.ADDRESS.STREET",width:60,filterable:!0,sortable:!0},{id:"billing.address.zip",field:"billing.address.zip",headerKey:"BILLING.ADDRESS.ZIP",width:60,type:l.i.number,filterable:!0,sortable:!0,filter:{model:l.k.compoundInput},formatter:l.l.multiple,params:{formatters:[l.l.complexObject,l.l.translate]}},{id:"finish",field:"finish",name:"Date",formatter:l.l.dateIso,sortable:!0,minWidth:90,width:120,exportWithFormatter:!0,type:l.i.date,filterable:!0,filter:{model:l.k.dateRange}}];const e=I().add(-2,"days").format("YYYY-MM-DD"),t=I().add(20,"days").format("YYYY-MM-DD");this.gridOptions={enableFiltering:!0,enableCellNavigation:!0,enableTranslate:!0,i18n:this.translate,gridMenu:{resizeOnShowHeaderRow:!0,customItems:[{iconCssClass:"fa fa-times text-danger",title:"Reset Grid",disabled:!1,command:"reset-grid",positionOrder:60}],onCommand:(e,t)=>{"reset-grid"===t.command&&(this.angularGrid.gridService.resetGrid(this.columnDefinitions),localStorage.gridStateGraphql=null)}},pagination:{pageSizes:[10,15,20,25,30,40,50,75,100],pageSize:20,totalItems:0},presets:{columns:[{columnId:"name",width:100},{columnId:"gender",width:55},{columnId:"company"},{columnId:"billing.address.zip"},{columnId:"billing.address.street",width:120},{columnId:"finish",width:130}],filters:[{columnId:"gender",searchTerms:["male"],operator:l.q.equal},{columnId:"name",searchTerms:["John Doe"],operator:l.q.contains},{columnId:"company",searchTerms:["xyz"],operator:"IN"},{columnId:"finish",searchTerms:[e,t],operator:l.q.rangeInclusive}],sorters:[{columnId:"name",direction:"asc"},{columnId:"company",direction:l.r.DESC}],pagination:{pageNumber:2,pageSize:20}},backendServiceApi:{service:new l.m,options:this.getBackendOptions(this.isWithCursor),preProcess:()=>this.displaySpinner(!0),process:e=>this.getCustomerApiCall(e),postProcess:e=>{this.metrics=e.metrics,this.displaySpinner(!1)}}}}angularGridReady(e){this.angularGrid=e,this.gridStateSub=this.angularGrid.gridStateService.onGridStateChanged.subscribe(e=>console.log(e))}displaySpinner(e){this.processing=e,this.status=e?{text:"processing...",class:"alert alert-danger"}:{text:"done",class:"alert alert-success"}}getBackendOptions(e){return{columnDefinitions:this.columnDefinitions,datasetName:"users",isWithCursor:e,addLocaleIntoQuery:!0,extraQueryArguments:[{field:"userId",value:123}],keepArgumentFieldDoubleQuotes:!0}}getCustomerApiCall(e){const t={data:{users:{nodes:[],pageInfo:{hasNextPage:!0},totalCount:100}}};return new Promise((e,i)=>{setTimeout(()=>{this.graphqlQuery=this.angularGrid.backendService.buildQuery(),e(t)},250)})}goToFirstPage(){this.angularGrid.paginationService.goToFirstPage()}goToLastPage(){this.angularGrid.paginationService.goToLastPage()}gridStateChanged(e){console.log("Client sample, Grid State changed:: ",e),localStorage.gridStateGraphql=JSON.stringify(e.gridState)}clearAllFiltersAndSorts(){this.angularGrid&&this.angularGrid.gridService&&this.angularGrid.gridService.clearAllFiltersAndSorts()}saveCurrentGridState(e){console.log("GraphQL current grid state",this.angularGrid.gridStateService.getCurrentGridState())}switchLanguage(){this.selectedLanguage="en"===this.selectedLanguage?"fr":"en",this.translate.use(this.selectedLanguage)}};P.ctorParameters=()=>[{type:d.c}],P=a.b([Object(n.n)({template:i("MR6s")}),Object(n.B)(),a.c("design:paramtypes",[d.c])],P);let j=class{constructor(){this.title="Example 14: Grouping",this.subTitle='\n  (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grouping-&-Aggregators" target="_blank">Wiki docs</a>)\n  <ul>\n    <li>\n    Fully dynamic and interactive multi-level grouping with filtering and aggregates over 50\'000 items\n    </li>\n    <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\n  </ul>\n  ',this.processing=!1}ngOnInit(){this.columnDefinitions=[{id:"sel",name:"#",field:"num",width:40,excludeFromExport:!0,maxWidth:70,resizable:!0,filterable:!0,selectable:!1,focusable:!1},{id:"title",name:"Title",field:"title",width:50,minWidth:50,cssClass:"cell-title",filterable:!0,sortable:!0},{id:"duration",name:"Duration",field:"duration",minWidth:50,width:60,filterable:!0,filter:{model:l.k.slider,operator:">="},sortable:!0,type:l.i.number,groupTotalsFormatter:l.o.sumTotals,params:{groupFormatterPrefix:"Total: "}},{id:"%",name:"% Complete",field:"percentComplete",minWidth:70,width:90,formatter:l.l.percentCompleteBar,filterable:!0,filter:{model:l.k.compoundSlider},sortable:!0,type:l.i.number,groupTotalsFormatter:l.o.avgTotalsPercentage,params:{groupFormatterPrefix:"<i>Avg</i>: "}},{id:"start",name:"Start",field:"start",minWidth:60,filterable:!0,filter:{model:l.k.compoundDate},sortable:!0,type:l.i.dateIso,formatter:l.l.dateIso,exportWithFormatter:!0},{id:"finish",name:"Finish",field:"finish",minWidth:60,filterable:!0,filter:{model:l.k.compoundDate},sortable:!0,type:l.i.dateIso,formatter:l.l.dateIso,exportWithFormatter:!0},{id:"cost",name:"Cost",field:"cost",minWidth:70,width:100,filterable:!0,filter:{model:l.k.compoundInput},type:l.i.number,sortable:!0,exportWithFormatter:!0,formatter:l.l.dollar,groupTotalsFormatter:l.o.sumTotalsDollar,params:{groupFormatterPrefix:"<b>Total</b>: "}},{id:"effort-driven",name:"Effort Driven",minWidth:20,width:80,maxWidth:80,cssClass:"cell-effort-driven",field:"effortDriven",formatter:l.l.checkmark,sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:l.k.singleSelect}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableExcelExport:!0,enableFiltering:!0,enableGrouping:!0,exportOptions:{sanitizeDataExport:!0},excelExportOptions:{sanitizeDataExport:!0},gridMenu:{hideExportTextDelimitedCommand:!1}},this.loadData(500)}angularGridReady(e){this.angularGrid=e,this.gridObj=e.slickGrid,this.dataviewObj=e.dataView}loadData(e){this.dataset=[];for(let t=0;t<e;t++){const e=2e3+Math.floor(10*Math.random()),i=Math.floor(11*Math.random()),n=Math.floor(29*Math.random()),r=Math.round(100*Math.random());this.dataset[t]={id:"id_"+t,num:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:r,percentCompleteNumber:r,start:new Date(e,i,n),finish:new Date(e,i+1,n),cost:t%33==0?null:Math.round(1e4*Math.random())/100,effortDriven:t%5==0}}}clearGrouping(){this.dataviewObj.setGrouping([])}collapseAllGroups(){this.dataviewObj.collapseAllGroups()}expandAllGroups(){this.dataviewObj.expandAllGroups()}exportToExcel(){this.angularGrid.excelExportService.exportToExcel({filename:"Export",format:l.j.xlsx})}exportToCsv(e="csv"){this.angularGrid.exportService.exportToFile({delimiter:"csv"===e?l.f.comma:l.f.tab,filename:"myExport",format:"csv"===e?l.j.csv:l.j.txt})}groupByDuration(){this.dataviewObj.setGrouping({getter:"duration",formatter:e=>`Duration: ${e.value} <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Avg("percentComplete"),new l.a.Sum("cost")],comparer:(e,t)=>l.t.numeric(e.value,t.value,l.s.asc),aggregateCollapsed:!1,lazyTotalsCalculation:!0})}groupByDurationOrderByCount(e){this.dataviewObj.setGrouping({getter:"duration",formatter:e=>`Duration: ${e.value} <span style="color:green">(${e.count} items)</span>`,comparer:(e,t)=>e.count-t.count,aggregators:[new l.a.Avg("percentComplete"),new l.a.Sum("cost")],aggregateCollapsed:e,lazyTotalsCalculation:!0})}groupByDurationEffortDriven(){this.dataviewObj.setGrouping([{getter:"duration",formatter:e=>`Duration: ${e.value}  <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("duration"),new l.a.Sum("cost")],aggregateCollapsed:!0,lazyTotalsCalculation:!0},{getter:"effortDriven",formatter:e=>`Effort-Driven: ${e.value?"True":"False"} <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Avg("percentComplete"),new l.a.Sum("cost")],collapsed:!0,lazyTotalsCalculation:!0}])}groupByDurationEffortDrivenPercent(){this.dataviewObj.setGrouping([{getter:"duration",formatter:e=>`Duration: ${e.value}  <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("duration"),new l.a.Sum("cost")],aggregateCollapsed:!0,lazyTotalsCalculation:!0},{getter:"effortDriven",formatter:e=>`Effort-Driven: ${e.value?"True":"False"}  <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Sum("duration"),new l.a.Sum("cost")],lazyTotalsCalculation:!0},{getter:"percentComplete",formatter:e=>`% Complete: ${e.value}  <span style="color:green">(${e.count} items)</span>`,aggregators:[new l.a.Avg("percentComplete")],aggregateCollapsed:!0,collapsed:!0,lazyTotalsCalculation:!0}])}};j=a.b([Object(n.B)(),Object(n.n)({template:i("IKRe")}),a.c("design:paramtypes",[])],j);let L={};const W=(e,t,i,n,r)=>L&&L[n.id]&&i<0?`<div style="color:red; font-weight:bold;">${i}</div>`:i;let N=class{constructor(){this.title="Example 7: Header Button Plugin",this.subTitle='\n    This example demonstrates using the <b>Slick.Plugins.HeaderButtons</b> plugin to easily add buttons to colum headers.\n    These buttons can be specified directly in the column definition, and are very easy to configure and use.\n    (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Menu-&-Header-Buttons" target="_blank">Wiki docs</a>)\n    <ul>\n      <li>Resize the 1st column to see all icon/command</li>\n      <li>Mouse hover the 2nd column to see it\'s icon/command</li>\n      <li>For all the other columns, click on top-right red circle icon to enable highlight of negative numbers.</li>\n      <li>Note: The "Header Button" & "Header Menu" Plugins cannot be used at the same time</li>\n    </ul>\n  '}ngOnInit(){this.columnDefinitions=[],this.gridOptions={enableAutoResize:!0,enableHeaderButton:!0,enableHeaderMenu:!1,autoResize:{containerId:"demo-container",sidePadding:15},enableFiltering:!1,enableCellNavigation:!0,headerButton:{onCommand:(e,t)=>{const i=t.column,n=t.button,r=t.command;L||(L={}),"toggle-highlight"===r&&("fa fa-circle red"===n.cssClass?(delete L[i.id],n.cssClass="fa fa-circle-o red faded",n.tooltip="Highlight negative numbers."):(L[i.id]=!0,n.cssClass="fa fa-circle red",n.tooltip="Remove highlight."),this.gridObj.invalidate())}}},this.getData()}ngOnDestroy(){L=null}getData(){for(let t=0;t<9;t++)this.columnDefinitions.push({id:t,name:"Column"+(t+1),field:t+"",width:100,sortable:!0,formatter:W,header:{buttons:[{cssClass:"fa fa-circle-o red faded",command:"toggle-highlight",tooltip:"Highlight negative numbers."}]}});this.columnDefinitions[0].name="Resize me!",this.columnDefinitions[0].header={buttons:[{cssClass:"fa fa-tag",handler:e=>{alert("Tag")}},{cssClass:"fa fa-comment",handler:e=>{alert("Comment")}},{cssClass:"fa fa-info-circle",handler:e=>{alert("Info")}},{cssClass:"fa fa-question-circle",handler:e=>{alert("Help")}}]},this.columnDefinitions[1].name="Hover me!",this.columnDefinitions[1].header={buttons:[{cssClass:"fa fa-question-circle",showOnHover:!0,tooltip:"This button only appears on hover.",handler:e=>{alert("Help")}}]};const e=[];for(let t=0;t<100;t++){const i=e[t]={};i.id=t;for(let e=0;e<this.columnDefinitions.length;e++)i[e]=Math.round(10*Math.random())-5}this.dataset=e}gridReady(e){this.gridObj=e}dataviewReady(e){this.dataviewObj=e}};N=a.b([Object(n.n)({template:i("cHcR")})],N);let B=class{constructor(){this.title="Example 8: Header Menu Plugin",this.subTitle='\n    This example demonstrates using the <b>Slick.Plugins.HeaderMenu</b> plugin to easily add menus to colum headers.<br/>\n    These menus can be specified directly in the column definition, and are very easy to configure and use.\n    (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Menu-&-Header-Buttons" target="_blank">Wiki docs</a>)\n    <ul>\n      <li>Now enabled by default in the Global Grid Options, it will add the default commands of (hide column, sort asc/desc)</li>\n      <li>Hover over any column header to see an arrow showing up on the right</li>\n      <li>Try Sorting (multi-sort) the 2 columns "Duration" and "% Complete" (the other ones are disabled)</li>\n      <li>Try hiding any columns (you use the "Column Picker" plugin by doing a right+click on the header to show the column back)</li>\n      <li>Note: The "Header Button" & "Header Menu" Plugins cannot be used at the same time</li>\n    </ul>\n  '}ngOnInit(){this.columnDefinitions=[{id:"title",name:"Title",field:"title"},{id:"duration",name:"Duration",field:"duration",sortable:!0},{id:"%",name:"% Complete",field:"percentComplete",sortable:!0},{id:"start",name:"Start",field:"start"},{id:"finish",name:"Finish",field:"finish"},{id:"effort-driven",name:"Effort Driven",field:"effortDriven"}],this.columnDefinitions.forEach(e=>{e.header={menu:{items:[{iconCssClass:"fa fa-sort-asc",title:"Sort Ascending",disabled:!e.sortable,command:"sort-asc"},{iconCssClass:"fa fa-sort-desc",title:"Sort Descending",disabled:!e.sortable,command:"sort-desc"},{iconCssClass:"fa fa-times",title:"Hide Column",command:"hide"},{iconCssClass:"fa fa-question-circle",title:"Help",command:"help"}]}}}),this.gridOptions={enableAutoResize:!0,enableHeaderMenu:!0,autoResize:{containerId:"demo-container",sidePadding:15},enableFiltering:!1,enableCellNavigation:!0,headerMenu:{hideSortCommands:!1,hideColumnHideCommand:!1,onCommand:(e,t)=>{"help"===t.command&&alert("Please help!!!")}}},this.getData()}getData(){const e=[];for(let t=0;t<500;t++)e[t]={id:t,title:"Task "+t,duration:Math.round(25*Math.random())+" days",percentComplete:Math.round(100*Math.random()),start:"01/01/2009",finish:"01/05/2009",effortDriven:t%5==0};this.dataset=e}angularGridReady(e){this.angularGrid=e}gridReady(e){this.gridObj=e}dataviewReady(e){this.dataviewObj=e}};B=a.b([Object(n.n)({template:i("r1Mw")})],B);const H=(e,t,i,n,r,a)=>{return(a&&"function"==typeof a.getOptions?a.getOptions():{}).i18n.instant("TASK_X",{x:i})};let z=class{constructor(e){this.translate=e,this.title="Example 12: Localization (i18n)",this.subTitle='Support multiple locales with the ngx-translate plugin, following these steps (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Localization" target="_blank">Wiki docs</a>)\n  <ol class="small">\n    <li>You first need to "enableTranslate" in the Grid Options</li>\n    <li>In the Column Definitions, you have following options</li>\n    <ul>\n      <li>To translate a header title, use "headerKey" with a translate key (headerKey: \'TITLE\')</li>\n      <li>For the cell values, you need to use a Formatter, there\'s 2 ways of doing it</li>\n      <ul>\n        <li>formatter: myCustomTranslateFormatter <b>&lt;= "Title" column uses it</b></li>\n        <li>formatter: Formatters.translate, i18n: this.translateService <b>&lt;= "Completed" column uses it</b></li>\n      </ul>\n    </ul>\n    <li>For date localization, you need to create your own custom formatter. </li>\n    <ul>\n      <li>You can easily implement logic to switch between Formatters "dateIso" or "dateUs", depending on current locale.</li>\n    </ul>\n    <li>For the Select (dropdown) filter, you can fill in the "labelKey" property, if found it will use it, else it will use "label"</li>\n      <ul>\n        <li>What if your select options have totally different value/label pair? In this case, you can use the <b>customStructure: { label: \'customLabel\', value: \'customValue\'}</b> to change the property name(s) to use.\'</li>\n        <li>What if you want to use "customStructure" and translation? Simply pass this flag <b>enableTranslateLabel: true</b></li>\n        <li>More info on the Select Filter <a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Select-Filter" target="_blank">Wiki page</a>\n      </ul>\n    <li>For more info about "Download to File", read the <a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Export-to-File" target="_blank">Wiki page</a></li>\n    </ol>\n  ',this.duplicateTitleHeaderCount=1,this.selectedLanguage=this.translate.getDefaultLang()}ngOnInit(){this.columnDefinitions=[{id:"title",name:"Title",field:"id",headerKey:"TITLE",minWidth:100,formatter:H,sortable:!0,filterable:!0,params:{useFormatterOuputToFilter:!0}},{id:"description",name:"Description",field:"description",filterable:!0,sortable:!0,minWidth:80},{id:"duration",name:"Duration (days)",field:"duration",headerKey:"DURATION",sortable:!0,formatter:l.l.percentCompleteBar,minWidth:100,exportWithFormatter:!1,filterable:!0,type:l.i.number,filter:{model:l.k.slider,params:{hideSliderNumber:!0}}},{id:"start",name:"Start",field:"start",headerKey:"START",minWidth:100,formatter:l.l.dateIso,outputType:l.i.dateIso,type:l.i.date,exportWithFormatter:!0,filterable:!0,filter:{model:l.k.compoundDate}},{id:"finish",name:"Finish",field:"finish",headerKey:"FINISH",formatter:l.l.dateIso,outputType:l.i.dateIso,type:l.i.date,minWidth:100,filterable:!0,filter:{model:l.k.compoundDate}},{id:"completedBool",name:"Completed",field:"completedBool",headerKey:"COMPLETED",minWidth:100,sortable:!0,formatter:l.l.checkmark,exportCustomFormatter:l.l.translateBoolean,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,labelKey:"TRUE"},{value:!1,labelKey:"FALSE"}],model:l.k.singleSelect,enableTranslateLabel:!0,filterOptions:{autoDropWidth:!0}}},{id:"completed",name:"Completed",field:"completed",headerKey:"COMPLETED",formatter:l.l.translate,sortable:!0,minWidth:100,exportWithFormatter:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:"TRUE",labelKey:"TRUE"},{value:"FALSE",labelKey:"FALSE"}],collectionSortBy:{property:"labelKey"},enableTranslateLabel:!0,model:l.k.singleSelect,filterOptions:{autoDropWidth:!0}}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableAutoResize:!0,enableExcelCopyBuffer:!0,enableExcelExport:!0,enableExport:!0,enableFiltering:!0,enableTranslate:!0,i18n:this.translate,excelExportOptions:{customExcelHeader:(e,t)=>{const i="fr"===this.translate.currentLang?"Titre qui est suffisament long pour \xeatre coup\xe9":"My header that is long enough to wrap",n=e.getStyleSheet().createFormat({font:{size:12,fontName:"Calibri",bold:!0,color:"FF0000FF"},alignment:{wrapText:!0}});t.setRowInstructions(0,{height:30}),t.mergeCells("B1","D1");const r=[];r.push({value:""}),r.push({value:i,metadata:{style:n.id}}),t.data.push(r)}},exportOptions:{exportWithFormatter:!0,sanitizeDataExport:!0},gridMenu:{hideExportCsvCommand:!1,hideExportTextDelimitedCommand:!1}},this.loadData(1e3)}loadData(e){this.dataset=[];for(let t=0;t<e;t++){const e=2e3+Math.floor(30*Math.random()),i=Math.floor(11*Math.random()),n=Math.floor(29*Math.random());this.dataset[t]={id:t,description:t%5?"desc "+t:"\u{1f680}\u{1f984} espa\xf1ol",duration:Math.round(100*Math.random())+"",start:new Date(e,i,n),finish:new Date(e,i+1,n),completedBool:t%5==0,completed:t%5==0?"TRUE":"FALSE"}}}angularGridReady(e){this.angularGrid=e}dynamicallyAddTitleHeader(){const e={id:`title${this.duplicateTitleHeaderCount++}`,field:"id",headerKey:"TITLE",formatter:H,sortable:!0,minWidth:100,filterable:!0,params:{useFormatterOuputToFilter:!0}};this.columnDefinitions.push(e),this.columnDefinitions=this.columnDefinitions.slice()}exportToExcel(){this.angularGrid.excelExportService.exportToExcel({filename:"Export",format:l.j.xlsx})}exportToFile(e="csv"){this.angularGrid.exportService.exportToFile({delimiter:"csv"===e?l.f.comma:l.f.tab,filename:"myExport",format:"csv"===e?l.j.csv:l.j.txt})}switchLanguage(){this.selectedLanguage="en"===this.selectedLanguage?"fr":"en",this.translate.use(this.selectedLanguage)}};z.ctorParameters=()=>[{type:d.c}],z=a.b([Object(n.n)({template:i("fsdD")}),Object(n.B)(),a.c("design:paramtypes",[d.c])],z);let _=class{constructor(e){this.translate=e,this.title="Example 9: Grid Menu Control",this.subTitle='\n    This example demonstrates using the <b>Slick.Controls.GridMenu</b> plugin to easily add a Grid Menu (aka hamburger menu) on the top right corner of the grid.\n    (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-Menu" target="_blank">Wiki docs</a>)\n    <br/>\n    <ul>\n      <li>You can change the Grid Menu icon, for example "fa-ellipsis-v"&nbsp;&nbsp;<span class="fa fa-ellipsis-v"></span>&nbsp;&nbsp;(which is shown in this example)</li>\n      <li>By default the Grid Menu shows all columns which you can show/hide them</li>\n      <li>You can configure multiple custom "commands" to show up in the Grid Menu and use the "onGridMenuCommand()" callback</li>\n      <li>Doing a "right + click" over any column header will also provide a way to show/hide a column (via the Column Picker Plugin)</li>\n      <li><i class="fa fa-arrow-down"></i> You can also show the Grid Menu anywhere on your page</li>\n    </ul>\n  ',this.selectedLanguage=this.translate.getDefaultLang()}ngOnInit(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",headerKey:"TITLE",filterable:!0,type:l.i.string},{id:"phone",name:"Phone Number using mask",field:"phone",filterable:!0,sortable:!0,minWidth:100,type:l.i.string,formatter:l.l.mask,params:{mask:"(000) 000-0000"},filter:{model:l.k.inputMask,operator:l.q.startsWith}},{id:"duration",name:"Duration",field:"duration",headerKey:"DURATION",sortable:!0,filterable:!0,type:l.i.string},{id:"%",name:"% Complete",field:"percentComplete",sortable:!0,filterable:!0,type:l.i.number,formatter:l.l.percentCompleteBar,filter:{model:l.k.compoundSlider,params:{hideSliderNumber:!1}}},{id:"start",name:"Start",field:"start",headerKey:"START",filterable:!0,type:l.i.string},{id:"finish",name:"Finish",field:"finish",headerKey:"FINISH",filterable:!0,type:l.i.string},{id:"effort-driven",name:"Completed",field:"effortDriven",headerKey:"COMPLETED",maxWidth:80,formatter:l.l.checkmark,type:l.i.boolean,minWidth:100,sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"true"},{value:!1,label:"false"}],model:l.k.singleSelect}}],this.visibleColumns=this.columnDefinitions,this.gridOptions={columnPicker:{hideForceFitButton:!0,hideSyncResizeButton:!0,onColumnsChanged:(e,t)=>{console.log("Column selection changed from Column Picker, visible columns: ",t.columns)}},enableAutoResize:!0,enableGridMenu:!0,autoResize:{containerId:"demo-container",sidePadding:15},enableFiltering:!0,enableCellNavigation:!0,gridMenu:{customTitleKey:"CUSTOM_COMMANDS",iconCssClass:"fa fa-ellipsis-v",hideForceFitButton:!0,hideSyncResizeButton:!0,hideToggleFilterCommand:!1,menuWidth:17,resizeOnShowHeaderRow:!0,customItems:[{iconCssClass:"fa fa-question-circle",titleKey:"HELP",disabled:!1,command:"help",positionOrder:99},{divider:!0,command:"",positionOrder:98},{title:"Disabled command",disabled:!0,command:"disabled-command",positionOrder:98}],onCommand:(e,t)=>{"help"===t.command&&alert("Please help!!!")},onColumnsChanged:(e,t)=>{console.log("Column selection changed from Grid Menu, visible columns: ",t.columns)}},enableTranslate:!0,i18n:this.translate},this.getData()}angularGridReady(e){this.angularGrid=e}getData(){const e=[];for(let t=0;t<500;t++)e[t]={id:t,title:"Task "+t,phone:this.generatePhoneNumber(),duration:Math.round(25*Math.random())+" days",percentComplete:Math.round(100*Math.random()),start:"01/01/2009",finish:"01/05/2009",effortDriven:t%5==0};this.dataset=e}generatePhoneNumber(){let e="";for(let t=0;t<10;t++)e+=Math.round(9*Math.random())+"";return e}switchLanguage(){this.selectedLanguage="en"===this.selectedLanguage?"fr":"en",this.translate.use(this.selectedLanguage)}toggleGridMenu(e){if(this.angularGrid&&this.angularGrid.extensionService){this.angularGrid.extensionService.getSlickgridAddonInstance(l.h.gridMenu).showGridMenu(e)}}};_.ctorParameters=()=>[{type:d.c}],_=a.b([Object(n.n)({template:i("W8EM")}),Object(n.B)(),a.c("design:paramtypes",[d.c])],_);let V=class{constructor(e){this.http=e,this.title="Example 5: Grid connected to Backend Server with OData",this.subTitle='\n    Sorting/Paging connected to a Backend OData Service (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/OData" target="_blank">Wiki docs</a>).\n    <br/>\n    <ul class="small">\n      <li>Only "Name" field is sortable for the demo (because we use JSON files), however "multiColumnSort: true" is also supported</li>\n      <li>This example also demos the Grid State feature, open the console log to see the changes</li>\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)\n      <ul>\n        <li>The (*) can be used as startsWith (ex.: "abc*" => startsWith "abc") / endsWith (ex.: "*xyz" => endsWith "xyz")</li>\n        <li>The other operators can be used on column type number for example: ">=100" (bigger or equal than 100)</li>\n      </ul>\n      <li>OData Service could be replaced by other Service type in the future (GraphQL or whichever you provide)</li>\n      <li>You can also preload a grid with certain "presets" like Filters / Sorters / Pagination <a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-State-&-Preset" target="_blank">Wiki - Grid Preset</a>\n    </ul>\n  ',this.dataset=[],this.isCountEnabled=!0,this.odataVersion=2,this.odataQuery="",this.processing=!0,this.status={text:"processing...",class:"alert alert-danger"}}angularGridReady(e){this.angularGrid=e}ngOnInit(){this.columnDefinitions=[{id:"name",name:"Name",field:"name",sortable:!0,type:l.i.string,filterable:!0,filter:{model:l.k.compoundInput}},{id:"gender",name:"Gender",field:"gender",filterable:!0,filter:{model:l.k.singleSelect,collection:[{value:"",label:""},{value:"male",label:"male"},{value:"female",label:"female"}]}},{id:"company",name:"Company",field:"company"}],this.gridOptions={enableAutoResize:!0,autoResize:{containerId:"demo-container",sidePadding:15},checkboxSelector:{hideInFilterHeaderRow:!1,hideInColumnTitleRow:!0},enableCellNavigation:!0,enableFiltering:!0,enableCheckboxSelector:!0,enableRowSelection:!0,pagination:{pageSizes:[10,15,20,25,30,40,50,75,100],pageSize:20,totalItems:0},presets:{filters:[{columnId:"gender",searchTerms:["male"],operator:l.q.equal}],sorters:[{columnId:"name",direction:"asc"}],pagination:{pageNumber:2,pageSize:20}},backendServiceApi:{service:new l.n,options:{enableCount:this.isCountEnabled,version:this.odataVersion},preProcess:()=>this.displaySpinner(!0),process:e=>this.getCustomerApiCall(e),postProcess:e=>{this.metrics=e.metrics,this.displaySpinner(!1),this.getCustomerCallback(e)}}}}displaySpinner(e){this.processing=e,this.status=e?{text:"processing...",class:"alert alert-danger"}:{text:"done",class:"alert alert-success"}}getCustomerCallback(e){let t="totalRecordCount";this.isCountEnabled&&(t=4===this.odataVersion?"@odata.count":"odata.count"),this.gridOptions.pagination.totalItems=e[t],this.metrics&&(this.metrics.totalItemCount=e[t]),this.gridOptions=Object.assign({},this.gridOptions),this.dataset=e.items,this.odataQuery=e.query}getCustomerApiCall(e){return this.getCustomerDataApiMock(e)}goToFirstPage(){this.angularGrid.paginationService.goToFirstPage()}goToLastPage(){this.angularGrid.paginationService.goToLastPage()}getCustomerDataApiMock(e){return new Promise((t,i)=>{const n=e.toLowerCase().split("&");let r,a=0,o="",l=100;const s={};for(const e of n)if(e.includes("$top=")&&(r=+e.substring("$top=".length)),e.includes("$skip=")&&(a=+e.substring("$skip=".length)),e.includes("$orderby=")&&(o=e.substring("$orderby=".length)),e.includes("$filter=")){const t=e.substring("$filter=".length).replace("%20"," ");if(t.includes("contains")){const e=t.match(/contains\(([a-zA-Z\/]+),\s?'(.*?)'/),i=e[1].trim();s[i]={type:"substring",term:e[2].trim()}}if(t.includes("substringof")){const e=t.match(/substringof\('(.*?)',([a-zA-Z ]*)/),i=e[2].trim();s[i]={type:"substring",term:e[1].trim()}}if(t.includes("eq")){const e=t.match(/([a-zA-Z ]*) eq '(.*?)'/);if(Array.isArray(e)){const t=e[1].trim();s[t]={type:"equal",term:e[2].trim()}}}if(t.includes("startswith")){const e=t.match(/startswith\(([a-zA-Z ]*),\s?'(.*?)'/),i=e[1].trim();s[i]={type:"starts",term:e[2].trim()}}if(t.includes("endswith")){const e=t.match(/endswith\(([a-zA-Z ]*),\s?'(.*?)'/),i=e[1].trim();s[i]={type:"ends",term:e[2].trim()}}}let d;switch(o.includes("asc")?"ASC":o.includes("desc")?"DESC":""){case"ASC":d="assets/data/customers_100_ASC.json";break;case"DESC":d="assets/data/customers_100_DESC.json";break;default:d="assets/data/customers_100.json"}this.http.get(d).subscribe(i=>{const n=a;let o=i;if(s){for(const e in s)s.hasOwnProperty(e)&&(o=o.filter(t=>{const i=s[e].type,n=s[e].term;let r=e;if(e&&-1!==e.indexOf(" ")){const t=e.split(" ");r=t[t.length-1]}const a=t[r];if(a)switch(i){case"equal":return a.toLowerCase()===n;case"ends":return a.toLowerCase().endsWith(n);case"starts":return a.toLowerCase().startsWith(n);case"substring":return a.toLowerCase().includes(n)}}));l=o.length}const d=o.slice(n,n+r);setTimeout(()=>{let i="totalRecordCount";this.isCountEnabled&&(i=4===this.odataVersion?"@odata.count":"odata.count");const n={items:d,[i]:l,query:e};console.log("Backend Result",n),t(n)},250)})})}gridStateChanged(e){console.log("Client sample, Grid State changed:: ",e)}changeCountEnableFlag(){this.isCountEnabled=!this.isCountEnabled;const e=this.gridOptions.backendServiceApi.service;return e.updateOptions({enableCount:this.isCountEnabled}),e.clearFilters(),this.angularGrid.filterService.clearFilters(),!0}setOdataVersion(e){this.odataVersion=e;const t=this.gridOptions.backendServiceApi.service;return t.updateOptions({version:this.odataVersion}),t.clearFilters(),this.angularGrid.filterService.clearFilters(),!0}};V.ctorParameters=()=>[{type:C.a}],V=a.b([Object(n.n)({template:i("FRgl")}),Object(n.B)(),a.c("design:paramtypes",[C.a])],V);function U(e,t){return Math.floor(Math.random()*(t-e+1)+e)}const q=(e,t,i,n,r,a)=>{return(a&&"function"==typeof a.getOptions?a.getOptions():{}).i18n.instant("TASK_X",{x:i})};let Y=class{constructor(e){this.translate=e,this.title="Example 25: Filtering from Range of Search Values",this.subTitle='\n    This demo shows how to use Filters with Range of Search Values\n    <br/>\n    <ul class="small">\n      <li>All input filters support the following operators: (>, >=, <, <=, <>, !=, =, ==, *) and now also the (..) for an input range\n      <li>All filters (which support ranges) can be defined via the 2 dots (..) which represents a range, this also works for dates and slider in the "presets"</li>\n      <ul>\n        <li>For a numeric range defined in an input filter (must be of type text), you can use 2 dots (..) to represent a range</li>\n        <li>example: typing "10..90" will filter values between 10 and 90 (but excluding the number 10 and 90)</li>\n      </ul>\n      <ul>\n        <li>note that the examples shown below for the operator, are case sensitive</li>\n        <li>by default the range are not inclusive which would be the same as defining the filter options to "operator: \'RangeExclusive\'" or "operator: OperatoryType.rangeExclusive"</li>\n        <li>you can also set the inverse (inclusive) by defining the filter options to "operator: \'RangeInclusive\'" or "operator: OperatoryType.rangeIncluside"</li>\n      </ul>\n      <li>Date Range with Flatpickr Date Picker, they will also use the locale, choose a start date then drag or click on the end date</li>\n    </ul>\n  ';this.translate.use("en"),this.selectedLanguage="en"}ngOnInit(){this.columnDefinitions=[{id:"title",name:"Title",field:"id",headerKey:"TITLE",minWidth:100,formatter:q,sortable:!0,filterable:!0,params:{useFormatterOuputToFilter:!0}},{id:"description",name:"Description",field:"description",filterable:!0,sortable:!0,minWidth:80,type:l.i.string,filter:{model:new w,enableTrimWhiteSpace:!0}},{id:"complete",name:"% Complete",field:"percentComplete",headerKey:"PERCENT_COMPLETE",minWidth:120,sortable:!0,formatter:l.l.progressBar,type:l.i.number,filterable:!0,filter:{model:l.k.sliderRange,maxValue:100,operator:l.q.rangeInclusive,params:{hideSliderNumbers:!1},filterOptions:{min:0,step:5}}},{id:"start",name:"Start",field:"start",headerKey:"START",formatter:l.l.dateIso,sortable:!0,minWidth:75,width:100,exportWithFormatter:!0,type:l.i.date,filterable:!0,filter:{model:l.k.compoundDate}},{id:"finish",name:"Finish",field:"finish",headerKey:"FINISH",formatter:l.l.dateIso,sortable:!0,minWidth:75,width:120,exportWithFormatter:!0,type:l.i.date,filterable:!0,filter:{model:l.k.dateRange}},{id:"duration",field:"duration",headerKey:"DURATION",maxWidth:90,type:l.i.number,sortable:!0,filterable:!0,filter:{model:l.k.input,operator:l.q.rangeExclusive}},{id:"completed",name:"Completed",field:"completed",headerKey:"COMPLETED",minWidth:85,maxWidth:90,formatter:l.l.checkmark,exportWithFormatter:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:l.k.singleSelect,filterOptions:{autoDropWidth:!0}}}];const e=I().add(-2,"days").format("YYYY-MM-DD"),t=I().add(20,"days").format("YYYY-MM-DD");this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableExcelCopyBuffer:!0,enableFiltering:!0,enableTranslate:!0,i18n:this.translate,presets:{filters:[{columnId:"duration",searchTerms:["4..88"]},{columnId:"complete",operator:"RangeInclusive",searchTerms:[5,80]},{columnId:"finish",operator:"RangeInclusive",searchTerms:[e,t]}],sorters:[{columnId:"complete",direction:"DESC"},{columnId:"duration",direction:"ASC"}]}},this.dataset=this.mockData(1200)}angularGridReady(e){this.angularGrid=e}mockData(e,t=0){const i=[];for(let n=t;n<t+e;n++){const e=U(0,365),t=U(I().year(),I().year()+1),r=U(1,12),a=U(10,28),o=U(0,100);i.push({id:n,title:"Task "+n,description:n%5?"desc "+n:null,duration:e,percentComplete:o,percentCompleteNumber:o,start:n%4?null:new Date(t,r,a),finish:new Date(t,r+1,a),completed:100===o})}return i}gridStateChanged(e){console.log("Client sample, Grid State changed:: ",e)}saveCurrentGridState(e){console.log("Client sample, last Grid State:: ",this.angularGrid.gridStateService.getCurrentGridState())}refreshMetrics(e,t){t&&t.current>0&&setTimeout(()=>{this.metrics={startTime:new Date,itemCount:t&&t.current,totalItemCount:this.dataset.length}})}switchLanguage(){const e="en"===this.selectedLanguage?"fr":"en";this.translate.use(e).subscribe(()=>this.selectedLanguage=e)}};Y.ctorParameters=()=>[{type:d.c}],Y=a.b([Object(n.n)({template:i("ZiwD")}),a.c("design:paramtypes",[d.c])],Y);i("4Y23"),i("MLAY");const K=(e,t,i,n,r)=>r&&r.brand&&r.brand.name||"",Q=(e,t,i,n,r)=>{let a="";return r&&r.octopart_url&&r.mpn&&(a=`<a href="${r.octopart_url}" target="_blank">${r.mpn}</a>`),a};let J=class{constructor(){this._eventHandler=new Slick.EventHandler,this.title="Example 18: Octopart Catalog Search - Remote Model Plugin",this.subTitle='\n    This example demonstrates how to use "slick.remotemodel.js" or any Remote implementation through an external Remote Service\n    <ul>\n      <li>\n        Your browser (Chrome) might block access to the Octopart query, if you get "block content" then just unblock it \n        or try with different browser like Firefox or Edge\n      </li>\n      <li>If the demo throws some errors, try again later (there\'s a limit per day).</li>\n      <li>\n        Uses <a href="https://github.com/6pac/SlickGrid/blob/master/slick.remotemodel.js" target="_blank">slick.remotemodel.js</a>\n        which is hooked up to load search results from Octopart, but can easily be extended\n        to support any JSONP-compatible backend that accepts paging parameters.\n      </li>\n      <li>\n        This demo implements a custom DataView, however please note that you are on your own to implement all necessary DataView methods\n        for Sorting, Filtering, etc...\n      </li>\n      <li>\n      Soure code for this example is available <a href="https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-remote.component.ts" target="_blank">here</a>\n      </li>\n    </ul>\n  ',this.dataset=[],this.loading=!1,this.search="switch",this.loaderDataView=new Slick.Data.RemoteModel,this.customDataView=this.loaderDataView&&this.loaderDataView.data}angularGridReady(e){this.angularGrid=e,this.gridObj=e.slickGrid,this.loaderDataView.setSort("score",-1),this.gridObj.setSortColumn("score",!1),this.gridObj.onViewportChanged.notify()}ngOnDestroy(){this._eventHandler.unsubscribeAll()}ngOnInit(){this.defineGrid(),this.hookAllLoaderEvents(),this.loaderDataView.setSearch(this.search)}defineGrid(){this.columnDefinitions=[{id:"mpn",name:"MPN",field:"mpn",formatter:Q,width:100,sortable:!0},{id:"brand",name:"Brand",field:"brand.name",formatter:K,width:100,sortable:!0},{id:"short_description",name:"Description",field:"short_description",width:520}],this.gridOptions={enableAutoResize:!0,autoResize:{containerId:"demo-container",sidePadding:15},enableCellNavigation:!0,enableColumnReorder:!1,enableGridMenu:!1,multiColumnSort:!1}}hookAllLoaderEvents(){this._eventHandler&&this._eventHandler.subscribe&&this.loaderDataView&&this.loaderDataView.onDataLoading&&this.loaderDataView.onDataLoaded&&(this._eventHandler.subscribe(this.loaderDataView.onDataLoading,(e,t)=>{this.loading=!0}),this._eventHandler.subscribe(this.loaderDataView.onDataLoaded,(e,t)=>{if(t&&this.gridObj&&this.gridObj.invalidateRow&&this.gridObj.updateRowCount&&this.gridObj.render){for(let e=t.from;e<=t.to;e++)this.gridObj.invalidateRow(e);this.gridObj.updateRowCount(),this.gridObj.render(),this.loading=!1}}))}onSort(e,t){if(this.gridObj&&this.gridObj.getViewport&&this.loaderDataView&&this.loaderDataView.ensureData&&this.loaderDataView.setSort){const e=this.gridObj.getViewport();t&&t.sortCol&&t.sortCol.field&&this.loaderDataView.setSort(t.sortCol.field,t.sortAsc?1:-1),this.loaderDataView.ensureData(e.top,e.bottom)}}onViewportChanged(e,t){if(this.gridObj&&this.gridObj.getViewport&&this.loaderDataView&&this.loaderDataView.ensureData){const e=this.gridObj.getViewport();this.loaderDataView.ensureData(e.top,e.bottom)}}searchChanged(e){if(e&&this.gridObj&&this.gridObj.getViewport&&this.loaderDataView&&this.loaderDataView.ensureData&&this.loaderDataView.setSearch){const t=this.gridObj.getViewport();this.loaderDataView.setSearch(e),this.loaderDataView.ensureData(t.top,t.bottom)}}};J=a.b([Object(n.n)({template:i("HNE4")}),a.c("design:paramtypes",[])],J);let Z=class{constructor(){}alertAssignee(e){"string"==typeof e?alert(`Assignee on this task is: ${e.toUpperCase()}`):alert("No one is assigned to this task.")}};Z=a.b([Object(n.n)({template:i("aSjM")}),a.c("design:paramtypes",[])],Z);let X=class{};X=a.b([Object(n.n)({template:'<h4>\n      <i class="fa fa-refresh fa-spin fa-2x fa-fw"></i>\n      Loading...\n    </h4>'})],X);let ee=class{constructor(e){this.translate=e,this.title="Example 21: Row Detail View",this.subTitle='\n    Add functionality to show extra information with a Row Detail View, (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Detail" target="_blank">Wiki docs</a>)\n    <ul>\n      <li>Click on the row "+" icon or anywhere on the row to open it (the latter can be changed via property "useRowClick: false")</li>\n      <li>Pass a View/Model as a Template to the Row Detail</li>\n      <li>You can use "expandableOverride()" callback to override logic to display expand icon on every row (for example only show it every 2nd row)</li>\n    </ul>\n  ',this.detailViewRowCount=9,this.selectedLanguage=this.translate.getDefaultLang()}angularGridReady(e){this.angularGrid=e}get rowDetailInstance(){return this.angularGrid&&this.angularGrid.extensionService.getSlickgridAddonInstance(l.h.rowDetailView)||{}}ngOnInit(){this.defineGrid()}defineGrid(){const e=[];for(let t=0;t<500;t++)e.push({value:t,label:t});this.columnDefinitions=[{id:"title",name:"Title",field:"title",sortable:!0,type:l.i.string,width:70,filterable:!0},{id:"duration",name:"Duration (days)",field:"duration",formatter:l.l.decimal,params:{minDecimalPlaces:1,maxDecimalPlaces:2},sortable:!0,type:l.i.number,minWidth:90,filterable:!0},{id:"percent2",name:"% Complete",field:"percentComplete2",formatter:l.l.progressBar,type:l.i.number,sortable:!0,minWidth:100,filterable:!0,filter:{model:l.k.slider,operator:">"}},{id:"start",name:"Start",field:"start",formatter:l.l.dateIso,sortable:!0,type:l.i.date,minWidth:90,exportWithFormatter:!0,filterable:!0,filter:{model:l.k.compoundDate}},{id:"finish",name:"Finish",field:"finish",formatter:l.l.dateIso,sortable:!0,type:l.i.date,minWidth:90,exportWithFormatter:!0,filterable:!0,filter:{model:l.k.compoundDate}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",minWidth:100,formatter:l.l.checkmark,type:l.i.boolean,filterable:!0,sortable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:l.k.singleSelect}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableFiltering:!0,enableRowDetailView:!0,rowSelectionOptions:{selectActiveRow:!0},rowDetailView:{process:e=>this.simulateServerAsyncCall(e),loadOnce:!0,singleRowExpand:!1,useRowClick:!0,panelRows:this.detailViewRowCount,preloadComponent:X,viewComponent:Z}},this.getData()}getData(){this.dataset=[];for(let e=0;e<1e3;e++){const t=2e3+Math.floor(10*Math.random()),i=Math.floor(11*Math.random()),n=Math.floor(29*Math.random()),r=Math.round(100*Math.random());this.dataset[e]={id:e,title:"Task "+e,duration:e%33==0?null:100*Math.random()+"",percentComplete:r,percentComplete2:r,percentCompleteNumber:r,start:new Date(t,i,n),finish:new Date(t,i+1,n),effortDriven:e%5==0}}}changeDetailViewRowCount(){if(this.angularGrid&&this.angularGrid.extensionService){const e=this.rowDetailInstance.getOptions();e&&e.panelRows&&(e.panelRows=this.detailViewRowCount,this.rowDetailInstance.setOptions(e))}}closeAllRowDetail(){this.angularGrid&&this.angularGrid.extensionService&&this.rowDetailInstance.collapseAll()}simulateServerAsyncCall(e){const t=["John Doe","Jane Doe","Chuck Norris","Bumblebee","Jackie Chan","Elvis Presley","Bob Marley","Mohammed Ali","Bruce Lee","Rocky Balboa"];return new Promise(i=>{setTimeout(()=>{const n=e;n.assignee=t[this.randomNumber(0,10)],n.reporter=t[this.randomNumber(0,10)],i(n)},1e3)})}randomNumber(e,t){return Math.floor(Math.random()*(t-e+1)+e)}};ee.ctorParameters=()=>[{type:d.c}],ee=a.b([Object(n.n)({template:i("tsvY")}),a.c("design:paramtypes",[d.c])],ee);let te=class{constructor(e){this.translate=e,this.title="Example 17: Row Move Plugin",this.subTitle="This example demonstrates using the <b>Slick.Plugins.RowMoveManager</b> plugin to easily move a row in the grid.<br/>\n    <ul>\n      <li>Click to select, Ctrl+Click to toggle selection, Shift+Click to select a range.</li>\n      <li>Drag one or more rows by the handle (icon) to reorder</li>\n    </ul>\n  ",this.selectedLanguage=this.translate.getDefaultLang()}angularGridReady(e){this.angularGrid=e}ngOnInit(){this.columnDefinitions=[{id:"#",field:"",name:"",width:40,behavior:"selectAndMove",selectable:!1,resizable:!1,cssClass:"cell-reorder dnd",excludeFromExport:!0},{id:"title",name:"Title",field:"title"},{id:"duration",name:"Duration",field:"duration",sortable:!0},{id:"%",name:"% Complete",field:"percentComplete",sortable:!0},{id:"start",name:"Start",field:"start"},{id:"finish",name:"Finish",field:"finish"},{id:"effort-driven",name:"Completed",field:"effortDriven",formatter:l.l.checkmark}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableCellNavigation:!0,enableRowMoveManager:!0,gridMenu:{iconCssClass:"fa fa-ellipsis-v"},rowMoveManager:{onBeforeMoveRows:(e,t)=>this.onBeforeMoveRow(e,t),onMoveRows:(e,t)=>this.onMoveRows(e,t)},enableTranslate:!0,i18n:this.translate},this.getData()}getData(){const e=[];for(let t=0;t<500;t++)e[t]={id:t,title:"Task "+t,duration:Math.round(25*Math.random())+" days",percentComplete:Math.round(100*Math.random()),start:"01/01/2009",finish:"01/05/2009",effortDriven:t%5==0};this.dataset=e}onBeforeMoveRow(e,t){for(let i=0;i<t.rows.length;i++)if(t.rows[i]===t.insertBefore||t.rows[i]===t.insertBefore-1)return e.stopPropagation(),!1;return!0}onMoveRows(e,t){const i=[];let n,r;const a=t.rows,o=t.insertBefore;n=this.dataset.slice(0,o),r=this.dataset.slice(o,this.dataset.length),a.sort((e,t)=>e-t);for(let s=0;s<a.length;s++)i.push(this.dataset[a[s]]);a.reverse();for(let s=0;s<a.length;s++){const e=a[s];e<o?n.splice(e,1):r.splice(e-o,1)}this.dataset=n.concat(i.concat(r));const l=[];for(let s=0;s<a.length;s++)l.push(n.length+s);this.angularGrid.slickGrid.resetActiveCell(),this.angularGrid.slickGrid.setData(this.dataset),this.angularGrid.slickGrid.setSelectedRows(l),this.angularGrid.slickGrid.render()}};te.ctorParameters=()=>[{type:d.c}],te=a.b([Object(n.n)({template:i("ad2g")}),a.c("design:paramtypes",[d.c])],te);let ie=class{constructor(){this.title="Example 10: Multiple Grids with Row Selection",this.subTitle='\n    Row selection, single or multi-select (<a href="https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Selection" target="_blank">Wiki docs</a>).\n    <ul>\n      <li>Single Select, you can click on any cell to make the row active</li>\n      <li>Multiple Selections, you need to specifically click on the checkbox to make 1 or more selections</li>\n      <li>Note that "enableExcelCopyBuffer" cannot be used at the same time as Row Selection because there can exist only 1 SelectionModel at a time</li>\n    </ul>\n  '}ngOnInit(){this.prepareGrid()}angularGridReady1(e){this.angularGrid1=e,this.gridObj1=e&&e.slickGrid||{}}angularGridReady2(e){this.angularGrid2=e,this.gridObj2=e&&e.slickGrid||{}}prepareGrid(){this.columnDefinitions1=[{id:"title",name:"Title",field:"title",sortable:!0,type:l.i.string,editor:{model:l.g.longText}},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:l.i.number,editor:{model:l.g.integer}},{id:"complete",name:"% Complete",field:"percentComplete",formatter:l.l.percentCompleteBar,type:l.i.number,sortable:!0},{id:"start",name:"Start",field:"start",formatter:l.l.dateIso,sortable:!0,type:l.i.dateIso,editor:{model:l.g.date}},{id:"finish",name:"Finish",field:"finish",formatter:l.l.dateIso,sortable:!0,type:l.i.date,editor:{model:l.g.date},exportWithFormatter:!0},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",formatter:l.l.checkmark,type:l.i.number,sortable:!0}],this.columnDefinitions2=[{id:"title",name:"Title",field:"title",sortable:!0,type:l.i.string,filterable:!0},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:l.i.number,filterable:!0},{id:"complete",name:"% Complete",field:"percentComplete",formatter:l.l.percentCompleteBar,type:l.i.number,filterable:!0,sortable:!0},{id:"start",name:"Start",field:"start",filterable:!0,sortable:!0,formatter:l.l.dateIso,exportWithFormatter:!0,type:l.i.date,filter:{model:l.k.compoundDate}},{id:"finish",name:"Finish",field:"finish",filterable:!0,sortable:!0,formatter:l.l.dateIso,exportWithFormatter:!0,type:l.i.date,filter:{model:l.k.compoundDate}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",formatter:l.l.checkmark,type:l.i.boolean,sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"true"},{value:!1,label:"false"}],model:l.k.singleSelect}}],this.gridOptions1={editable:!0,autoEdit:!1,enableAutoResize:!1,enableCellNavigation:!0,enableFiltering:!1,enableCheckboxSelector:!0,enableRowSelection:!0,checkboxSelector:{hideSelectAllCheckbox:!0},rowSelectionOptions:{selectActiveRow:!0}},this.gridOptions2={enableAutoResize:!1,enableCellNavigation:!0,enableFiltering:!0,checkboxSelector:{hideInFilterHeaderRow:!1,hideInColumnTitleRow:!0},rowSelectionOptions:{selectActiveRow:!1},preselectedRows:[0,2],enableCheckboxSelector:!0,enableRowSelection:!0},this.dataset1=this.prepareData(),this.dataset2=this.prepareData()}prepareData(){const e=[];for(let t=0;t<500;t++){const i=2e3+Math.floor(10*Math.random()),n=Math.floor(11*Math.random()),r=Math.floor(29*Math.random()),a=Math.round(100*Math.random());e[t]={id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:a,percentCompleteNumber:a,start:new Date(i,n,r),finish:new Date(i,n+1,r),effortDriven:t%5==0}}return e}handleSelectedRowsChanged1(e,t){Array.isArray(t.rows)&&(this.selectedTitle=t.rows.map(e=>{return this.gridObj1.getDataItem(e).title||""}))}handleSelectedRowsChanged2(e,t){Array.isArray(t.rows)&&(this.selectedTitles=t.rows.map(e=>{return this.gridObj2.getDataItem(e).title||""}))}};function ne(e,t){return Math.floor(Math.random()*(t-e+1)+e)}ie=a.b([Object(n.n)({template:i("Blsj")}),Object(n.B)()],ie);let re=class{constructor(e){this.translate=e,this.title="Example 16: Grid State & Presets using Local Storage",this.subTitle='\n    Grid State & Preset (<a href="https://github.com/ghiscoding/aurelia-slickgrid/wiki/Grid-State-&-Preset" target="_blank">Wiki docs</a>)\n    <br/>\n    <ul class="small">\n      <li>Uses Local Storage to persist the Grid State and uses Grid Options "presets" to put the grid back to it\'s previous state</li>\n      <ul>\n        <li>to demo this, simply change any columns (position reorder, visibility, size, filter, sort), then refresh your browser with (F5)</li>\n      </ul>\n      <li>Local Storage is just one option, you can use whichever is more convenient for you (Local Storage, Session Storage, DB, ...)</li>\n    </ul>\n  ',this.selectedLanguage=this.translate.getDefaultLang()}angularGridReady(e){this.angularGrid=e}ngOnInit(){const e=JSON.parse(localStorage.gridState||null);this.defineGrid(e)}clearGridStateFromLocalStorage(){localStorage.gridState=null,this.angularGrid.gridService.resetGrid(this.columnDefinitions)}defineGrid(e){const t=[];for(let i=0;i<500;i++)t.push({value:i,label:i});this.columnDefinitions=[{id:"title",name:"Title",field:"title",headerKey:"TITLE",filterable:!0,sortable:!0,type:l.i.string,minWidth:45,width:100,filter:{model:l.k.compoundInput}},{id:"description",name:"Description",field:"description",filterable:!0,sortable:!0,minWidth:80,width:100,type:l.i.string,filter:{model:l.k.input}},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:l.i.number,exportCsvForceToKeepAsString:!0,minWidth:55,width:100,headerKey:"DURATION",filterable:!0,filter:{collection:t,model:l.k.multipleSelect,searchTerms:[1,33,44,50,66],filterOptions:{maxHeight:250,width:175}}},{id:"complete",name:"% Complete",field:"percentComplete",minWidth:70,type:l.i.number,sortable:!0,width:100,formatter:l.l.percentCompleteBar,filterable:!0,filter:{model:l.k.slider,operator:">"}},{id:"start",name:"Start",field:"start",headerKey:"START",formatter:l.l.dateIso,sortable:!0,minWidth:75,exportWithFormatter:!0,width:100,type:l.i.date,filterable:!0,filter:{model:l.k.compoundDate}},{id:"completed",field:"completed",headerKey:"COMPLETED",minWidth:85,maxWidth:85,formatter:l.l.checkmark,width:100,type:l.i.boolean,sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:l.k.singleSelect,filterOptions:{autoDropWidth:!0}}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:15},enableCheckboxSelector:!0,enableFiltering:!0,enableTranslate:!0,i18n:this.translate},e&&(this.gridOptions.presets=e),this.getData()}getData(){this.dataset=[];for(let e=0;e<500;e++){const t=Math.round(100*Math.random()),i=ne(2e3,2025),n=ne(10,25),r=ne(1,12),a=r<10?`0${r}`:r,o=ne(10,28),l=ne(0,100),s=ne(10,23),d=ne(10,59);this.dataset[e]={id:e,title:"Task "+e,etc:"Something hidden "+e,description:e%5?"desc "+e:null,duration:t,percentComplete:l,percentCompleteNumber:l,start:new Date(i,r,o),usDateShort:`${r}/${o}/${n}`,utcDate:`${i}-${a}-${o}T${s}:${d}:${d}Z`,completed:e%3==0}}}gridStateChanged(e){console.log("Client sample, Grid State changed:: ",e),localStorage.gridState=JSON.stringify(e.gridState)}saveCurrentGridState(e){const t=this.angularGrid.gridStateService.getCurrentGridState();console.log("Client sample, last Grid State:: ",t),localStorage.gridState=JSON.stringify(t)}switchLanguage(){this.selectedLanguage="en"===this.selectedLanguage?"fr":"en",this.translate.use(this.selectedLanguage)}useDefaultPresets(){return{columns:[{columnId:"description",width:170},{columnId:"title",width:55},{columnId:"duration"},{columnId:"complete"},{columnId:"start"},{columnId:"usDateShort"},{columnId:"utcDate"}],filters:[{columnId:"duration",searchTerms:[2,22,44]},{columnId:"usDateShort",operator:"<",searchTerms:["4/20/25"]}],sorters:[{columnId:"duration",direction:"DESC"},{columnId:"complete",direction:"ASC"}]}}};re.ctorParameters=()=>[{type:d.c}],re=a.b([Object(n.n)({template:i("Uogw")}),a.c("design:paramtypes",[d.c])],re);let ae=class{constructor(e){this.http=e,this.title="Example 24: Grids in Bootstrap Tabs",this.subTitle='This example demonstrate the creation of multiple grids in Bootstrap Tabs\n   <ol>\n    <li>Regular mocked data with javascript</li>\n    <li>Load dataset through Http-Client. Also note we need to call a "resizeGrid()" after focusing on this tab</li>\n  </ol>'}angularGrid2Ready(e){this.angularGrid2=e}ngOnInit(){this.defineGrid1(),this.defineGrid2(),this.dataset1=this.mockData(),this.http.get("assets/data/customers_100.json").subscribe(e=>this.dataset2=e)}defineGrid1(){this.columnDefinitions1=[{id:"title",name:"Title",field:"title",sortable:!0,minWidth:100},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,minWidth:100},{id:"%",name:"% Complete",field:"percentComplete",sortable:!0,minWidth:100},{id:"start",name:"Start",field:"start",minWidth:100},{id:"finish",name:"Finish",field:"finish",minWidth:100},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",sortable:!0,minWidth:100}],this.gridOptions1={enableAutoResize:!0,autoResize:{containerId:"demo-container",sidePadding:15},enableSorting:!0}}defineGrid2(){this.columnDefinitions2=[{id:"name",name:"Name",field:"name",filterable:!0,sortable:!0},{id:"gender",name:"Gender",field:"gender",filterable:!0,sortable:!0,filter:{model:l.k.singleSelect,collection:[{value:"",label:""},{value:"male",label:"male"},{value:"female",label:"female"}]}},{id:"company",name:"Company",field:"company",filterable:!0,sortable:!0}],this.gridOptions2={enableAutoResize:!0,autoResize:{containerId:"demo-container",sidePadding:15},enableFiltering:!0,enableSorting:!0}}mockData(){const e=[];for(let t=0;t<1e3;t++){const i=2e3+Math.floor(10*Math.random()),n=Math.floor(11*Math.random()),r=Math.floor(29*Math.random()),a=Math.round(100*Math.random());e[t]={id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:a,start:`${n}/${r}/${i}`,finish:`${n}/${r}/${i}`,effortDriven:t%5==0}}return e}resizeGrid2(){this.angularGrid2.resizerService.resizeGrid()}};ae.ctorParameters=()=>[{type:C.a}],ae=a.b([Object(n.n)({template:i("mu9r")}),Object(n.B)(),a.c("design:paramtypes",[C.a])],ae);let oe=class{constructor(){this.title="Angular-Slickgrid - Demo Site",this.subTitle="This site is to demo multiple usage of Angular-Slickgrid, choose an example from left side menu"}};oe=a.b([Object(n.n)({template:i("OV2u")})],oe);class le{constructor(e,t){this._class=e,this.http=t,this._clientLogLevel=se.INFO,this._serverLogLevel=se.OFF,this._isIE=!0,this.options={level:this._clientLogLevel,serverLogLevel:this._serverLogLevel,serverLoggingUrl:"/remotelog.do"},this._isIE=!(-1===navigator.userAgent.indexOf("MSIE")&&!navigator.userAgent.match(/Trident\//)&&!navigator.userAgent.match(/Edge\//))}trace(e,...t){this._log(se.TRACE,!0,e,t)}debug(e,...t){this._log(se.DEBUG,!0,e,t)}info(e,...t){this._log(se.INFO,!0,e,t)}log(e,...t){this._log(se.LOG,!0,e,t)}warn(e,...t){this._log(se.WARN,!0,e,t)}error(e,...t){this._log(se.ERROR,!0,e,t)}_timestamp(){return(new Date).toISOString()}_logOnServer(e,t,i){if(!this.options.serverLoggingUrl)return;if(e<this._serverLogLevel)return;const n=(new C.c).set("Content-Type","application/json");this.http.post(this.options.serverLoggingUrl,{level:de[e],message:t,additional:i,timestamp:this._timestamp()},{headers:n}).subscribe(e=>null,e=>this._log(se.ERROR,!1,"FAILED TO LOG ON SERVER"))}_logIE(e,t,i){switch(e){case se.WARN:console.warn(`${this._timestamp()} [${de[e]}]  -${this._class}-`,t,...i);break;case se.ERROR:console.error(`${this._timestamp()} [${de[e]}]  -${this._class}-`,t,...i);break;case se.INFO:console.info(`${this._timestamp()} [${de[e]}]  -${this._class}-`,t,...i);break;default:console.log(`${this._timestamp()} [${de[e]}]  -${this._class}-`,t,...i)}}_log(e,t,i,n=[]){if(!i)return;if(t&&this._logOnServer(e,i,n),e<this._clientLogLevel)return;if("object"==typeof i)try{i=JSON.stringify(i,null,2)}catch(a){n=[i,...n],i="circular object in message. "}if(this._isIE)return this._logIE(e,i,n);const r=this._getColor(e);console.log(`%c${this._timestamp()} [${de[e]}] - ${this._class} -`,`color:${r}`,i,...n)}_getColor(e){switch(e){case se.TRACE:return"blue";case se.DEBUG:return"teal";case se.INFO:case se.LOG:return"gray";case se.WARN:case se.ERROR:return"red";case se.OFF:default:return"black"}}}le.ctorParameters=()=>[{type:String},{type:C.a}];var se;!function(e){e[e.TRACE=0]="TRACE",e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.LOG=3]="LOG",e[e.WARN=4]="WARN",e[e.ERROR=5]="ERROR",e[e.OFF=6]="OFF"}(se||(se={}));const de=["TRACE","DEBUG","INFO","LOG","WARN","ERROR","OFF"];let ce,ue=class{constructor(e){this.httpClient=e,this.logger=null,this.pageCount=1,this.pageNumber=1,this.totalItems=0,this.processing=!1,this.realPagination=!0,this.logger=new le("grid-pagination",e),this.logger.info("method [constructor] - START/END")}set gridPaginationOptions(e){this._gridPaginationOptions=e,this.commonGrid=this.gridPaginationOptions.backendServiceApi.service}get gridPaginationOptions(){return this._gridPaginationOptions}ngOnInit(){this.logger.info("init: ")}changeToFirstPage(e){this.logger.info("method [changeToFirstPage] - START/END"),this.pageNumber=1,this.onPageChanged(e,this.pageNumber)}changeToLastPage(e){this.logger.info("method [changeToLastPage] - START/END"),this.pageNumber=this.pageCount,this.onPageChanged(e,this.pageNumber)}changeToNextPage(e){this.logger.info("method [changeToNextPage] - START/END"),this.pageNumber<this.pageCount&&(this.pageNumber++,this.onPageChanged(e,this.pageNumber))}changeToPreviousPage(e){this.logger.info("method [changeToNextPage] - START/END"),this.pageNumber>1&&(this.pageNumber--,this.onPageChanged(e,this.pageNumber))}changeToCurrentPage(e){this.logger.info("method [changeToCurrentPage] - START/END"),this.pageNumber=e.currentTarget.value,this.pageNumber<1?this.pageNumber=1:this.pageNumber>this.pageCount&&(this.pageNumber=this.pageCount),this.onPageChanged(e,this.pageNumber)}onPageChanged(e,t){this.logger.info("method [onPageChanged] - START/END",this.commonGrid),this.commonGrid.processOnPaginationChanged(e,{newPage:t,pageSize:-1})}};ue.ctorParameters=()=>[{type:C.a}],a.b([Object(n.E)("pageCount"),a.c("design:type",Object)],ue.prototype,"pageCount",void 0),a.b([Object(n.E)("pageNumber"),a.c("design:type",Object)],ue.prototype,"pageNumber",void 0),a.b([Object(n.E)(),a.c("design:type",Object),a.c("design:paramtypes",[Object])],ue.prototype,"gridPaginationOptions",null),ue=a.b([Object(n.n)({selector:"swt-common-grid-pagination",template:'\n    <div class="slick-pagination">\n    <div class="slick-pagination-nav">\n        <nav aria-label="Page navigation">\n            <ul class="pagination">\n                <li class="page-item" [ngClass]="pageNumber === 1 ? \'disabled\' : \'\'">\n                    <a class="page-link icon-seek-first fa fa-angle-double-left"\n                    aria-label="First" (click)="changeToFirstPage($event)"> </a>\n                </li>\n                <li class="page-item" [ngClass]="pageNumber === 1 ? \'disabled\' : \'\'">\n                    <a class="page-link icon-seek-prev fa fa-angle-left"\n                    aria-label="Previous" (click)="changeToPreviousPage($event)"> </a>\n                </li>\n            </ul>\n        </nav>\n\n        <div class="slick-page-number">\n            <span [translate]="\'PAGE\'"></span>\n            <input type="text" value="{{pageNumber}}" size="1"  (change)="changeToCurrentPage($event)">\n            <span [translate]="\'OF\'"></span><span> {{pageCount}}</span>\n        </div>\n\n        <nav aria-label="Page navigation">\n            <ul class="pagination">\n                <li class="page-item"\n                    [ngClass]="pageNumber === pageCount ? \'disabled\' : \'\'"><a\n                    class="page-link icon-seek-next text-center fa fa-lg fa-angle-right"\n                    aria-label="Next" (click)="changeToNextPage($event)"> </a></li>\n                <li class="page-item"\n                    [ngClass]="pageNumber === pageCount ? \'disabled\' : \'\'"><a\n                    class="page-link icon-seek-end fa fa-lg fa-angle-double-right"\n                    aria-label="Last" (click)="changeToLastPage($event)"> </a></li>\n            </ul>\n        </nav>\n        <nav>\n            <ul class="pagination">\n                <li class="">\n                    <span [hidden]="!processing" class="page-spin">\n                        <i class="fa fa-refresh fa-spin fa-lg fa-fw"></i>\n                    </span>\n                </li>\n            </ul>\n        </nav>\n    </div>\n</div>\n  ',styles:[".page-spin {\n              border: none;\n              height: 32px;\n              background-color: transparent;\n              cursor: default;\n              animation: fa-spin 1.2s infinite linear !important;\n            }\n            .page-spin:hover {\n                background-color: transparent;\n            }\n  "]}),a.c("design:paramtypes",[C.a])],ue);let me=class{constructor(e,t,i,r){this.httpClient=e,this.translate=t,this.el=i,this.renderer=r,this.logger=null,this.defaultPageSize=20,this.gridHeight=100,this.gridWidth=600,this.columnDefinitions=[],this.isAutoEdit=!1,this.isMultiSelect=!0,this.onFilterChanged_=new n.w,this.onPaginationChanged_=new n.w,this.onSortChanged_=new n.w,this.sortedGridColumn="",this.currentPage=1,this.filteredGridColumns="",this._onRowDoubleClick=new Function,this._onRowClick=new Function,this.gridOptions={asyncEditorLoading:!1,autoEdit:this.isAutoEdit,autoResize:{containerId:"common-grid-container",sidePadding:15},enableColumnPicker:!0,enableCellNavigation:!0,enableRowSelection:!0,enableCheckboxSelector:!1,enableFiltering:!0,rowHeight:23,forceFitColumns:!0,enableAutoTooltip:!0,enableGridMenu:!0,enablePagination:!1},this._paginationComponent={processing:!1,realPagination:!1},this.logger=new le("grid",e),this.logger.info("method [constructor] - START/END")}set paginationComponent(e){this.logger.info("method [pagination] - START, assigned datagrid pagination object: ",e.realPagination),e.realPagination&&(this._paginationComponent=e,this.gridOptions.backendServiceApi={service:this,preProcess:()=>{},process:e=>null,postProcess:e=>{}},this._paginationComponent.gridPaginationOptions=this.gridOptions,this.angularSlickGrid.createBackendApiInternalPostProcessCallback(this.gridOptions)),this.logger.info("method [pagination] - START")}get paginationComponent(){return this._paginationComponent}ngOnInit(){this.logger.info("method [ngOnInit] - START/END")}ngAfterViewInit(){this.logger.info("method [ngAfterViewInit] - START/END")}CustomGrid(e){this.logger.info("method [CustomGrid] - START"),this.id="grid"+Math.floor(Math.random()*Math.floor(100)),this.metaData=e;const t=[];if(this.metaData.columns.column){this.columnData=this.metaData.columns.column;for(let e=0;e<this.columnData.length;e++){const i=l.i.string,n=null,r=null,a=null,o=null,s=null,d={id:this.columnData[e].dataelement,name:this.columnData[e].heading,field:this.columnData[e].dataelement,sortable:this.columnData[e].sort,filterable:this.columnData[e].filterable,type:i,editor:n,formatter:r,filter:a,outputType:o,params:s,width:this.columnData[e].width};this.columnDefinitions.push(d),t[d.id]=""}this.gridObj.setColumns(this.columnDefinitions),this.angularSlickGrid.showPagination=!1}this.dataset=t,this.logger.info("method [CustomGrid] - END, this.columnDefinitions=",this.columnDefinitions)}CommonGrid(e,t,i,n,r,a,o=!0,l=null,s=!1,d=!1){}set gridData(e){this.logger.info("method [gridData] - START");const t=[];for(let i=0;e.row&&i<e.row.length;i++){const n=e.row[i],r={id:i};let a;const o=[];for(a in n)n.hasOwnProperty(a)&&(o[a]=n[a].content);t[i]=Object.assign(o,r)}this.dataset=t,this.paginationComponent.processing=!1,this.logger.info("method [gridData] - END, all data size="+(e&&e.hasOwnProperty("size")?e.size:0))}get gridData(){return this.dataset}gridReady(e){this.logger.info("method [gridReady] - START"),this.gridObj=e,this.logger.info("method [gridReady] - END")}dataviewReady(e){this.logger.info("method [dataviewReady] - START/END",e),this.dataviewObj=e}buildQuery(){return"buildQuery..."}init(e,t){this.options=e,this.pagination=t}resetPaginationOptions(){}updateOptions(e){this.options=Object.assign({},this.options,e)}processOnFilterChanged(e,t){this.logger.info("method [onFilterChanged] - START",t),this.filteredGridColumns="";let i=0;return"keyup"!==e.type&&"keydown"!==e.type||(i=750,clearTimeout(ce)),ce=setTimeout(()=>{this.filteredGridColumns="";for(let e=0;e<this.columnDefinitions.length;e++)t.columnFilters.hasOwnProperty(this.columnDefinitions[e].field)?this.filteredGridColumns+=t.columnFilters[this.columnDefinitions[e].field].searchTerms[0]+"|":this.filteredGridColumns+="All|";this.paginationComponent.pageNumber=1,this.currentPage=1,this.onFilterChanged_.emit(t),this.logger.info("method [onFilterChanged] - onFilterChanged_.emit(args) performed, filteredGridColumns="+this.filteredGridColumns)},i),this.logger.info("method [onFilterChanged] - END"),null}processOnPaginationChanged(e,t){return this.logger.info("method [onPaginationChanged] - START"),this.currentPage=t.newPage,this.onPaginationChanged_.emit(t),this.logger.info("method [onPaginationChanged] - END, currentPage="+this.currentPage),"onPaginationChanged"}processOnSortChanged(e,t){this.logger.info("method [onSortChanged] - START"),this.sortedGridColumn="";const i="|"+t.sortCols[0].sortAsc+"|";for(let n=0;n<this.columnDefinitions.length;n++)this.columnDefinitions[n].field===t.sortCols[0].sortCol.field&&(this.sortedGridColumn=""+n+i);return this.onSortChanged_.emit(t),this.logger.info("method [onSortChanged] - END, sortedGridColumn="+this.sortedGridColumn),"onSortChanged"}getFilteredGridColumns(){return this.filteredGridColumns}getSortedGridColumn(){return this.sortedGridColumn}get selectedRow(){return this._selectedRow}set selectedRow(e){this._selectedRow=e}get onRowDoubleClick(){return this._onRowDoubleClick}set onRowDoubleClick(e){this._onRowDoubleClick=e}get onRowClick(){return this._onRowClick}set onRowClick(e){this._onRowClick=e}};me.ctorParameters=()=>[{type:C.a},{type:d.c},{type:n.u},{type:n.W}],a.b([Object(n.E)(),a.c("design:type",Object)],me.prototype,"gridHeight",void 0),a.b([Object(n.E)(),a.c("design:type",Object)],me.prototype,"gridWidth",void 0),a.b([Object(n.kb)("angularSlickGrid",{static:!0}),a.c("design:type",l.b)],me.prototype,"angularSlickGrid",void 0),a.b([Object(n.Q)("onFilterChanged"),a.c("design:type",n.w)],me.prototype,"onFilterChanged_",void 0),a.b([Object(n.Q)("onPaginationChanged"),a.c("design:type",n.w)],me.prototype,"onPaginationChanged_",void 0),a.b([Object(n.Q)("onSortChanged"),a.c("design:type",n.w)],me.prototype,"onSortChanged_",void 0),a.b([Object(n.E)("pagination"),a.c("design:type",ue),a.c("design:paramtypes",[ue])],me.prototype,"paginationComponent",null),me=a.b([Object(n.n)({selector:"swt-common-grid",template:'<angular-slickgrid gridId=\'common-grid\'\n                      #angularSlickGrid\n                      (onDataviewCreated)="dataviewReady($event)"\n                      (onGridCreated)="gridReady($event)"\n                      [columnDefinitions]="columnDefinitions"\n                      [gridOptions]="gridOptions"\n                      [dataset]="dataset"\n                      >\n                      </angular-slickgrid>',styles:["\n       :host ::ng-deep .gridPane{\n            width: 100%!important;\n        }\n        :host ::ng-deep .slickgrid-container{\n            width: 100%!important;\n         }\n    "]}),Object(n.B)(),a.c("design:paramtypes",[C.a,d.c,n.u,n.W])],me);let he=class{constructor(e,t,i){this.httpClient=e,this.viewContainerRef=t,this.componentFactoryResolver=i,this.testurl="http://127.0.0.1:8080/grid!display.do?",this.currentUrl=this.testurl,this.logger=null,this.logger=new le("test",null)}ngOnInit(){this.commonGridPag&&(this.commonGrid.paginationComponent=this.commonGridPag)}ngAfterViewInit(){this.logger.info("method [ngAfterViewInit] - START"),setTimeout(()=>{this.commonGridPag.processing=!0,this.currentUrl=this.testurl+"&currentPage=1",this.commonGrid.CustomGrid(ge.pagination_samples.grid.metadata),this.commonGrid.gridData=ge.pagination_samples.grid.rows,this.commonGridPag.pageCount=ge.pagination_samples.grid.rows.maxpage,this.commonGridPag.processing=!1},0),this.logger.info("method [ngAfterViewInit] - END")}filterChanged(e){this.commonGridPag.processing=!0,this.updateGridData()}paginationChanged(e){this.commonGridPag.processing=!0,this.updateGridData()}sortChanged(e){this.commonGridPag.processing=!0,this.updateGridData()}updateGridData(){this.currentUrl=this.testurl+"&currentPage="+this.commonGrid.currentPage+"&selectedSort="+this.commonGrid.sortedGridColumn+"&selectedFilter="+this.commonGrid.filteredGridColumns,setTimeout(()=>{this.commonGrid.gridData=ge.pagination_samples.grid.rows,this.commonGridPag.pageCount=ge.pagination_samples.grid.rows.maxpage},750)}};he.ctorParameters=()=>[{type:C.a},{type:n.lb},{type:n.p}],a.b([Object(n.kb)("commonGrid1",{static:!0}),a.c("design:type",me)],he.prototype,"commonGrid",void 0),a.b([Object(n.kb)("commonGridPag1",{static:!0}),a.c("design:type",ue)],he.prototype,"commonGridPag",void 0),he=a.b([Object(n.n)({selector:"swt-common-grid-test",template:i("Nmjf")}),Object(n.B)(),a.c("design:paramtypes",[C.a,n.lb,n.p])],he);const ge={pagination_samples:{grid:{metadata:{columns:{column:[{sort:!0,filterable:!1,width:60,dataelement:"hasNote",heading:"Note"},{sort:!0,filterable:!0,width:125,dataelement:"status",heading:"Status"},{sort:!0,visible:!0,filterable:!0,width:125,dataelement:"currency",heading:"Currency"},{sort:!0,visible:!0,filterable:!0,width:125,dataelement:"amount",heading:"Amount"},{sort:!0,visible:!0,filterable:!0,width:125,dataelement:"inputDate",heading:"Input Date"},{sort:!0,visible:!0,filterable:!0,width:125,dataelement:"inputTime",heading:"Input Time"}]}},rows:{row:[{currency:{content:"EUR"},amount:{content:"2 203 677,000"},startTime:{content:"06/19/2017 11:52:51"},inputDate:{content:"06/19/2017"},status:{content:"New"},inputTime:{content:"11:52:51"},hasNote:{content:"False"}},{currency:{content:"USD"},amount:{content:"6 203 677,000"},startTime:{content:"06/28/2017 10:42:00"},inputDate:{content:"06/28/2017"},status:{content:"New"},inputTime:{content:"10:40:12"},hasNote:{content:"True"}}],maxpage:5}}}},pe=[{path:"home",component:oe},{path:"angular-components",component:b},{path:"additem",component:s},{path:"autoheight",component:v},{path:"basic",component:y},{path:"colspan",component:S},{path:"editor",component:R},{path:"formatter",component:F},{path:"frozen",component:M},{path:"headerbutton",component:N},{path:"headermenu",component:B},{path:"gridgraphql",component:P},{path:"gridmenu",component:_},{path:"gridstate",component:re},{path:"gridtabs",component:ae},{path:"draggrouping",component:O},{path:"grouping",component:j},{path:"localization",component:z},{path:"clientside",component:D},{path:"odata",component:V},{path:"range",component:Y},{path:"remote",component:J},{path:"rowdetail",component:ee},{path:"rowmove",component:te},{path:"selection",component:ie},{path:"swt",component:he},{path:"",redirectTo:"/basic",pathMatch:"full"},{path:"**",redirectTo:"/basic",pathMatch:"full"}];let fe=class{};fe=a.b([Object(n.J)({imports:[o.a.forRoot(pe,{useHash:!0})],exports:[o.a]})],fe);var be=i("cUpR"),ve=i("s7LF"),ye=i("SVse"),Ce=i("wTG2"),we=i("2ZVE"),ke=i("k5Gf");let De=class{constructor(){this.title="Angular-Slickgrid"}};De=a.b([Object(n.n)({selector:"app-root",template:i("lILz"),styles:[i("ynWL")]})],De);let Se=class{};Se=a.b([Object(n.J)({declarations:[De,m,p,u,f,s,b,v,y,D,S,R,O,F,M,P,j,N,B,z,_,V,Y,J,ee,te,ie,re,ae,X,Z,he,ue,me,oe],imports:[fe,be.a,ve.a,C.b,Ce.a,we.a.forRoot(),d.b.forRoot({loader:{provide:d.a,useFactory:function(e){return new ke.a(e,"./assets/i18n/",".json")},deps:[C.a]}}),l.c.forRoot({enableAutoResize:!0,autoResize:{containerId:"demo-container",sidePadding:15}})],entryComponents:[m,p,u,f,X,Z],providers:[{provide:n.d,useFactory:function(e,t){return()=>new Promise(i=>{t.get(ye.e,Promise.resolve(null)).then(()=>{e.setDefaultLang("en"),e.use("en").subscribe(()=>{},e=>{console.error("Problem with 'en' language initialization.'")},()=>{i(null)})})})},deps:[d.c,n.D],multi:!0}],bootstrap:[De]})],Se);Object(n.pb)(),Object(r.a)().bootstrapModule(Se,{preserveWhitespaces:!0}).catch(e=>console.log(e))}},[[0,0,4]]]);
//# sourceMappingURL=main-es2015.3d1f7db07d74022a80a2.js.map